if(sum(test==c(1:(n-i)))!=0) {
judge<- 0
break
}
}
if(judge==1 & i==(n-1)) {ans<- rbind(ans, index[k,])}
}
display<- apply(ans, 1, function(vec) {
l<- length(vec)
mat<- matrix(".",l,l)
for(i in 1:l) {mat[i,vec[i]]<- "Q"}
mat<- apply(mat, 1, paste, collapse="")
return(mat)
})
colnames(display)<- paste("solution", 1:nrow(ans), sep = "")
return(display)
}
solveNQueens(4)
solveNQueens(8)
solveNQueens(5)
totalNQueens<- function(n) {
ans<- solveNQueens(n)
return(nrow(ans))
}
totalNQueens(4)
solveNQueens(4)
totalNQueens<- function(n) {
ans<- solveNQueens(n)
return(ncol(ans))
}
totalNQueens(4)
totalNQueens(5)
maxSubArray(c(-2,1,-3,4,-1,2,1,-5,4))
maxSubArray<- function(nums) {
n<- length(nums)
ans<- 0
for(i in 1:n) {
for(j in 1:n) {
s<- sum(nums[i:j])
if(s>ans) {ans<- s
index<- c(i,j)}
}
}
return(nums[index[1]:index[j]])
}
maxSubArray(c(-2,1,-3,4,-1,2,1,-5,4))
maxSubArray<- function(nums) {
n<- length(nums)
ans<- 0
for(i in 1:n) {
for(j in 1:n) {
s<- sum(nums[i:j])
if(s>ans) {ans<- s
index<- c(i,j)}
}
}
return(nums[index[1]:index[2]])
}
maxSubArray(c(-2,1,-3,4,-1,2,1,-5,4))
paste(c(2,3,4,5), c("+","+"), sep = "")
maxSubArray(c(-2,1,-3,4,-1,3,1,-5,4))
matrix(1:12, 3)
matrix<- matrix(1:12, 3)
m<- nrow(matrix)
n<- ncol(matrix)
a<- NULL
sub<- function(m,n) {
if(n==2) {a<- merge(matrix[1,], matrix[,n],
rev(matrix[m,]), rev(matrix[1, 2:n]))
else {a<- c(a, Recall(m-1, n-1))}
}
return(a)
}
sub<- function(m,n) {
if(n==2) {a<- merge(matrix[1,], matrix[,n],
rev(matrix[m,]), rev(matrix[1, 2:n]))}
else {a<- c(a, Recall(m-1, n-1))}
return(a)
}
merge(matrix[1,]
matrix[1,
]
matrix[,n]
rev(matrix[m,])
rev(matrix[1, 2:n]
)
rev(matrix[2:n, 1]))
rev(matrix[2:n, 1]
)
rev(matrix[2:m, 1])
a<- merge(matrix[1,], matrix[,n],
rev(matrix[m,]), rev(matrix[2:m, 1]))
matrix[1,]
matrix[,n]
merge(matrix[1,], matrix[,n]
)
sub<- function(m,n) {
if(n==2) {a<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]), rev(matrix[2:(m-1), 1]))}
else {a<- c(a, Recall(m-1, n-1))}
return(a)
}
a
matrix
c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]), rev(matrix[2:(m-1), 1]))
matrix
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
ans<- NULL
if(n==1) {ans<- matrix}
if(n==2) {a<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]), rev(matrix[2:(m-1), 1]))}
else {a<- c(a, Recall(matrix[2:(m-1), 2:(n-1)]))}
return(a)
}
m<- nrow(matrix)
n<- ncol(matrix)
ans<- NULL
if(n==1) {ans<- matrix}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
ans<- NULL
if(m==1) {ans<- matrix}
if(m==2) {a<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]), rev(matrix[2:(m-1), 1]))}
else {a<- c(a, Recall(matrix[2:(m-1), 2:(n-1)]))}
return(a)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
ans<- NULL
if(m==1) {ans<- matrix}
else {
if(m==2) {a<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {a<- c(a, Recall(matrix[2:(m-1), 2:(n-1)]))}
}
return(a)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(m==1) {ans<- matrix}
else {
if(m==2) {a<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {a<- c(a, Recall(matrix[2:(m-1), 2:(n-1)]))}
}
return(a)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(m==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {ans<- c(a, Recall(matrix[2:(m-1), 2:(n-1)]))}
}
return(ans)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(m==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {ans<- c(ans, Recall(matrix[2:(m-1), 2:(n-1)]))}
}
return(ans)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(m==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {ans<- c(Recall(matrix[2:(m-1), 2:(n-1)]))}
}
return(ans)
}
spiralOrder(matrix)
matrix[2:(m-1), 2:(n-1)])
matrix[2:(m-1), 2:(n-1)]
matrix
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(m==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], matrix[2:m,n],
rev(matrix[m,1:(n-1)]),
rev(matrix[2:(m-1), 1]))}
else {ans<- c(ans, spiralOrder(matrix[2:(m-1), 2:(n-1)]))}
}
return(ans)
}
spiralOrder(matrix)
matrix[2:(m-1), 2:(n-1)]
nrow(matrix[2:(m-1), 2:(n-1)])
ncol(matrix[2:(m-1), 2:(n-1)])
nrow(matrix[2:(m-1), 2:(n-1)])==NULL
dim(matrix[2:(m-1), 2:(n-1)])
(matrix[2:(m-1), 2:(n-1)])
typeof(matrix)
m<- nrow(matrix)
c(matrix)
matrix==c(matrix)
matrix
m<- nrow(matrix)
n<- ncol(matrix)
ans<- NULL
mat<- matrix
for(k in 1:floor((n+1)/2)) {
ans<- c(ans, mat[1,], mat[2:m,n],
rev(mat[m,1:(n-1)]),
rev(mat[2:(m-1), 1]))}
ans
for(k in 1:floor((m+1)/2)) {
ans<- c(ans, mat[1,], mat[2:m,n],
rev(mat[m,1:(n-1)]),
rev(mat[2:(m-1), 1]))}
ans<- NULL
mat<- matrix
for(k in 1:floor((m+1)/2)) {
ans<- c(ans, mat[1,], mat[2:m,n],
rev(mat[m,1:(n-1)]),
rev(mat[2:(m-1), 1]))}
ans
floor((m+1)/2)
mat<- mat[2:(m-1), 2:(n-1)]
mat<- matrix
mat<- mat[2:(m-1), 2:(n-1)]
mat
mat[1,]
length(mat)
length(matrix)
cbind(1, 1:n)
if(NULL)
c(matrix)
mode(matrix)
dim
dim(matrix)
dim(matrix[1:1,])
a<- NULL
c(a,1)
m<- nrow(matrix)
n<- ncol(matrix)
c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]))
matrix
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
judge<- c(m,1)
if(judge==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
return(ams)
}
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
judge<- c(m,1)
if(judge==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
return(ams)
}
}
spiralOrder(matrix)
matrix[2:(m-1), 2:(n-1)])
matrix[2:(m-1), 2:(n-1)]
spiralOrder(matrix[2:(m-1), 2:(n-1)])
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
judge<- c(m,1)
if(judge==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
return(ans)
}
}
spiralOrder(matrix[2:(m-1), 2:(n-1)])
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
judge<- c(m,1)
if(judge==1) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
}
return(ans)
}
spiralOrder(matrix[2:(m-1), 2:(n-1)])
spiralOrder(matrix)
?if
?if()
matrix<- matrix(1:16,4)
matrix
spiralOrder(matrix)
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(is.null(m)) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
}
return(ans)
}
spiralOrder(matrix)
matrix(1:8,2)
matrix(1:8,4)
spiralOrder(matrix)
spiralOrder(matrix(1:8,4))
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(is.null(m)) {ans<- matrix}
else {
if(m==2||n==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(matrix[2:(m-1), 2:(n-1)]))
}
}
return(ans)
}
spiralOrder(matrix)
spiralOrder(matrix(1:8,4))
matrix
matrix[-1,]
mat<- matrix[-(1,3),]
mat<- matrix[-c(1,3),]
mat
spiralOrder<- function(matrix) {
m<- nrow(matrix)
n<- ncol(matrix)
if(is.null(m)) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
mat<- matrix[-c(1,m),-c(1,n)]
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(mat))
}
}
return(ans)
}
spiralOrder(matrix)
spiralOrder(matrix(1:8,4))
matrix(1:8,4)
canJump<- function(nums) {
n<- length(nums)
judge<- 0
for(i in 1:n) {
max_now<- i+nums[i]
if(max_now>=n) {judge<- 1}
if(max_now<=i) {break}
}
return(as.logical(judge))
}
canJump(c(2,3,1,1,4))
canJump(c(2,3,1,0,4))
canJump(c(3,2,1,0,4))
canJump(c(3,2,1,0,4,1))
canJump(c(2,3,1,1,4,4))
canJump(c(3,2,1,0))
canJump(c(3,2,1,0,1))
2%in%1:3
2%in%3:4
rbind(c(1,3), c(8,10), c(15,18), c(2,6))
intervals<- rbind(c(1,3), c(8,10), c(15,18), c(2,6))
rank(intervals)
rank(intervals[,1])
order(intervals[,1])
intervals[order(intervals[,1]),]
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
intervals[3,1]<- 5
View(intervals)
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
inter
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i < n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[-c(1,2),])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(8,10), c(15,18), c(2,6))
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
intervals<- rbind(c(1,9), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
