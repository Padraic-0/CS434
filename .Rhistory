}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(s1==s2) {return(0)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(cbind(Recall(ss11,ss21), Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(Recall(ss12,ss21))
}
else {next}
}
return(-1)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(Recall(sub1_1,sub2_1)& Recall(sub1_2, sub2_2)) {
return(TRUE)
}
else {if(Recall(sub1_1, sub2_2)& Recall(sub1_2,sub2_1)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(isScramble(sub1_1,sub2_1)& isScramble(sub1_2, sub2_2)) {
return(TRUE)
}
else {if(isScramble(sub1_1, sub2_2)& isScramble(sub1_2,sub2_1)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
n<- nchar(s1)
for(i in 1:n) {
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
if(Recall(ss11,ss21)& Recall(ss12, ss22)) {
return(TRUE)
}
else {if(Recall(ss11, ss22)& Recall(ss12,ss21)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
isScramble(a,b)
a<- "great"; b<- "rgtae"
isScramble(a,b)
s1<- "great"; s2<- "rgtae"
n<- nchar(s1)
i=1
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
s1<- "great"; s2<- "rgtae"
n<- nchar(s1)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
i=n
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
n<- nchar(s1)
for(i in 1:(n-1)) {
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
if(Recall(ss11,ss21)& Recall(ss12, ss22)) {
return(TRUE)
}
else {if(Recall(ss11, ss22)& Recall(ss12,ss21)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
s1<- "great"; s2<- "rgtae"
isScramble(s1,s2)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
options()
options(expressions)
options()$expressions
options(expressions = 100000)
isScramble(s1,s2)
isScramble(s1,s2)
dd
"dd"
Rscript --max-ppsize=500000
Rscript --max-ppsize=500000 [RFILE]
--max-ppsize=500000 [RFILE]
--max-ppsize=500000
--max-ppsize
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2)
nums1<- c(nums1, nums2)
for(k in (i+j):1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1}
else {nums1[k]<- nums2[j]; j<- j-1}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2)
nums1<- c(nums1, nums2)
for(k in (i+j):1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1}
else {nums1[k]<- nums2[j]; j<- j-1}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2); k<- i+j
nums1<- c(nums1, nums2)
while(j>=1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1; k<-k-1;}
else {nums1[k]<- nums2[j]; j<- j-1;k<-k-1;}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge(c(3,5,7,8,10), c(4,6,9,10))
?strtoi
n=2
permutations(n, n, c(0,1), repeats.allowed = T)
library(gtools)
permutations(n, n, c(0,1), repeats.allowed = T)
n=3
permutations(n, n, c(0,1), repeats.allowed = T)
permutations(n, n, c(0,0,1), repeats.allowed = T)
merge(0:1,0:1)
merge(0:1,0:1,0:1)
merge(merge(0:1,0:1),0:1)
permutations(n = 5, r = 5)
permutations(n = 3, r = 3, c(0,1))
permutations(n = 3, r = 3, c(0,1), repeats.allowed = T)
permutations(n = 3, r = 3, c(0,0,1), repeats.allowed = T)
permutations(n = 3, r = 2, c(0,0,1), repeats.allowed = T)
permutations(n = 2, r = 2, c(0,0,1), repeats.allowed = T)
permutations(n = 3, r = 3, c(0,0,1,1), repeats.allowed = T)
permutations(n = 3, r = 3, repeats.allowed = T)
permutations(n = 2, r = 3, repeats.allowed = T)
permutations(n = 2, r = 4, repeats.allowed = T)
nums<- apply(permutations(n = 2, r = n), 1,
function(x) {c(0,1)[x]})
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
nums
apply(nums, 2, function(x) {
strtoi(as.character(x), base = 2L)})
strtoi("000",base = 2L)
strtoi("001",base = 2L)
strtoi("010",base = 2L)
strtoi("011",base = 2L)
strtoi("111",base = 2L)
apply(nums, 2, function(x) {
strtoi(paste(as.character(x),collapse = ""), base = 2L)})
n=2
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
apply(nums, 2, function(x) {
strtoi(paste(as.character(x),collapse = ""), base = 2L)})
nums
grayCode<- function(n) {
library(gtools)
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
ans<- apply(nums, 2, function(x)
{strtoi(paste(as.character(x),collapse = ""), base = 2L)})
return(ans)
}
grayCode(3)
grayCode(2)
grayCode(5)
c(0,1)
cbind(0,c(0,1))
grayCode<- function(n) {
if(n==1) {return(c(0,1))}
else {
return(rbind(cbind(0,Recall(n-1)),
cbind(1, rev(Recall(n-1)))))
}
}
grayCode(5)
cbind(0,c(0,1))
rev(cbind(0,c(0,1)))
matrix(rev(cbind(0,c(0,1))), 2)
matrix(rev(cbind(0,c(0,1))), ncol=2)
matrix(rev(cbind(0,c(0,1))), nrow =2)
grayCode<- function(n) {
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(1,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
codes<- sub(n); l<- nrow(codes)
codes<- rbind(codes[1:l/2,], codes[l:(l/2+1),])
ans<- apply(codes, 1, function(x)
{strtoi(paste(as.character(x), collapse = ""), base = 2L)})
return(ans)
}
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(1,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
sub(2)
sub(3)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
sub(3)
2^2
2^5
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1)[2^(n-1):1,])))}
}
sub(3)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1)[2^(n-2):1,])))}
}
sub(3)
m<- matrix(1:9,3)
m
apply(m, 2, rev)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { mat<- apply(cbind(1, Recall(n-1)), 2, rev)
return(rbind(cbind(0,Recall(n-1)),mat)) }
}
sub(3)
grayCode<- function(n) {
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { mat<- apply(cbind(1, Recall(n-1)), 2, rev)
return(rbind(cbind(0,Recall(n-1)),mat)) }
}
ans<- apply(sub(n), 1, function(x)
{strtoi(paste(as.character(x), collapse = ""), base = 2L)})
return(ans)
}
grayCode(3)
grayCode(2)
grayCode(4)
nums<- c(1,2,2)
library(gtools)
n<- length(nums)
index<- permutations(n, 1)
index
index<- permutations(n, 2)
index
index<- combinations(n, 2)
index
combinations(n,n)
i=2
index<- combinations(n, i)
ans[[i]]<- apply(index, 1, function(x) {nums[x]})
n<- length(nums); ans<- vector("list")
ans[[i]]<- apply(index, 1, function(x) {nums[x]})
ans
a<- apply(index, 1, function(x) {nums[x]})
a
apply(a, 2, sort)
t(apply(a, 2, sort))
a[!duplicated(a),]
a<- t(apply(index, 1, function(x) {nums[x]}))
a<- t(apply(a, 2, sort))
a
a<- t(apply(index, 1, function(x) {nums[x]}))
a
a<- apply(index, 1, function(x) {nums[x]})
a
a<- t(apply(a, 2, sort))
a
a[!duplicated(a),]
subsetsWithDup<- function(nums) {
library(gtools)
n<- length(nums); ans<- NULL
for(i in 1:n) {
index<- combinations(n, i)
a<- apply(index, 1, function(x) {nums[x]})
a<- t(apply(a, 2, sort))
ans<- list(ans, a[!duplicated(a),])
}
return(ans)
}
subsetsWithDup(c(1,2,2))
subsetsWithDup<- function(nums) {
library(gtools)
n<- length(nums); ans<-list(NULL, unique(nums))
for(i in 2:(n-1)) {
index<- combinations(n, i)
a<- apply(index, 1, function(x) {nums[x]})
a<- t(apply(a, 2, sort))
ans<- list(ans, a[!duplicated(a),])
}
return(ans)
}
subsetsWithDup(c(1,2,2))
subsetsWithDup<- function(nums) {
library(gtools)
n<- length(nums); ans<-list(NULL, unique(nums))
for(i in 2:n) {
index<- combinations(n, i)
a<- apply(index, 1, function(x) {nums[x]})
a<- t(apply(a, 2, sort))
ans<- list(ans, a[!duplicated(a),])
}
return(ans)
}
subsetsWithDup(c(1,2,2))
subsetsWithDup<- function(nums) {
library(gtools)
n<- length(nums); ans<-vector("list");
ans[[1]]<- NULL; ans[[2]]<- matrix(unique(nums), ncol = 1)
for(i in 2:n) {
index<- combinations(n, i)
a<- apply(index, 1, function(x) {nums[x]})
a<- t(apply(a, 2, sort))
ans[[i+2]] <- a[!duplicated(a),]
}
return(ans)
}
subsetsWithDup(c(1,2,2))
subsetsWithDup<- function(nums) {
library(gtools)
n<- length(nums); ans<-vector("list");
ans[[1]]<- NULL; ans[[2]]<- matrix(unique(nums), ncol = 1)
for(i in 2:n) {
index<- combinations(n, i)
a<- apply(index, 1, function(x) {nums[x]})
a<- t(apply(a, 2, sort))
ans[[i+1]] <- a[!duplicated(a),]
}
return(ans)
}
subsetsWithDup(c(1,2,2))
s="1221"
n<- nchar(s); string<- unlist(strsplit(s, ""));
string
a<- paste(string[-1], sep = "")
a
a<- paste(string[-1], collapse = "")
a
numDecodings<- function(s) {
n<- nchar(s); string<- unlist(strsplit(s, ""));
if(n==1) {return(1)}
if(n==2) {if(as.numeric(s)<=26) {return(2)}
else {return(1)}}
else {
a<- paste(string[-1], collapse = "")
b<- paste(string[-(1:2),], collapse = "")
if(as.numeric(paste(string[1:2], collapse = "")) <= 26) {
return(sum(Recall(a),Recall(b)))
}
else {return(sum(Recall(a)))}
}
}
numDecodings("1221")
numDecodings<- function(s) {
n<- nchar(s); string<- unlist(strsplit(s, ""));
if(n==1) {return(1)}
if(n==2) {if(as.numeric(s)<=26) {return(2)}
else {return(1)}}
else {
a<- paste(string[-1], collapse = "")
b<- paste(string[-(1:2)], collapse = "")
if(as.numeric(paste(string[1:2], collapse = "")) <= 26) {
return(sum(Recall(a),Recall(b)))
}
else {return(sum(Recall(a)))}
}
}
numDecodings("1221")
numDecodings("12221")
numDecodings("12")
numDecodings("272")
numDecodings("262")
numDecodings("222")
numDecodings("1111")
numDecodings("12")
numDecodings("1111")
reverseBetween<- function(head, m, n) {
head[m:n]<- rev(head[m:n])
return(head)
}
reverseBetween(c(1,2,3,4,5), 2,4)
reverseBetween(c(1,2,3,4,5), 1,4)
combinations(4,4,c(3,3,3,2))
combinations(4,4,c(3,3,3,2),repeats.allowed = T)
combinations(4,4,c(6,7,8,9),repeats.allowed = T)
combinations(4,4,c(3,2),repeats.allowed = T)
combinations(4,4,c(3,22),repeats.allowed = T)
combinations(4,4,c(3,2,2),repeats.allowed = T)
combinations(4,4,c(3,3,2,2),repeats.allowed = T)
combinations(4,4,c(3,3,2,2))
combinations(2,4,c(3,2))
combinations(4,2,c(3,2))
combinations(4,2)
combinations(4,4,c(3,3,1,2))
combinations(4,4,c(3,4,1,2))
permutations(4,4,c(3,3,3,2))
permutations(4,4,c(3,3,3,2), repeats.allowed = T)
permutations(4,4,c(3,2), repeats.allowed = T)
restoreIpAddresses<- function(s) {
valid<- function(string) {
if (string[1] == "0" & nchar(string)> 1) {return(FALSE)}
if (nchar(string) == 3) {return(as.numeric(string) <=255)}
if (nchar(string) > 3) {return(FALSE)}
return(TRUE)
}
for(one in 1:3) {
for(two in (one+1):min(one+3, nchar(s))) {
for(three in (two+1):min(two+3, nchar(s))) {
s1<- substr(s, 1, one); s2<- substr(s,one+1, two)
s3<- substr(s, two+1, three); s4<- substr(s, three+1, nchar(s))
if(valid(s1) & valid(s2) & valid(s3) & valid(s4)) {
ip<- paste(s1, ".",s2, ".",s3,".",s4, sep = "")
ans<- rbind(ans, ip)
} } } }
return(ans)
}
restoreIpAddresses("25525511135")
restoreIpAddresses<- function(s) {
valid<- function(string) {
if (string[1] == "0" & nchar(string)> 1) {return(FALSE)}
if (nchar(string) == 3) {return(as.numeric(string) <=255)}
if (nchar(string) > 3) {return(FALSE)}
return(TRUE)
}
ans<- NULL
for(one in 1:3) {
for(two in (one+1):min(one+3, nchar(s))) {
for(three in (two+1):min(two+3, nchar(s))) {
s1<- substr(s, 1, one); s2<- substr(s,one+1, two)
s3<- substr(s, two+1, three); s4<- substr(s, three+1, nchar(s))
if(valid(s1) & valid(s2) & valid(s3) & valid(s4)) {
ip<- paste(s1, ".",s2, ".",s3,".",s4, sep = "")
ans<- rbind(ans, ip)
} } } }
return(ans)
}
restoreIpAddresses("25525511135")
restoreIpAddresses("2552551135")
restoreIpAddresses("252551135")
