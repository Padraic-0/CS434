count(1)
count(11)
count(1211)
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(paste(a, b,sep = "", collapse = ""))
}
count(21)
count(1211)
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
count(1211)
countAndSay<- function(n) {
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
if(n==1) {return(1)}
else {
nums<- 1
for(i in 2:n) {
nums<- count(nums)
}
}
return(nums)
}
countAndSay(2)
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
countAndSay<- function(n) {
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
if(n==1) {return(1)}
else {
nums<- 11
for(i in 2:n) {
nums<- count(nums)
}
}
return(nums)
}
countAndSay(2)
countAndSay<- function(n) {
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
if(n==1) {return(1)}
else {
nums<- 11
for(i in 2:(n-1)) {
nums<- count(nums)
}
}
return(nums)
}
countAndSay(2)
countAndSay<- function(n) {
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
if(n==1) {return(1)}
else {
nums<- 11
for(i in 2:(n-1)) {
nums<- count(nums)
}
}
return(nums)
}
countAndSay(2)
countAndSay(1)
countAndSay<- function(n) {
count<- function(nums) {
nums<- unlist(strsplit(as.character(nums), split = ""))
n<- length(nums)
l<- 1
a<- 1
b<- nums[1]
for(i in 1:(n-1)) {
if(nums[i+1]==nums[i]) {
a[l]<- a[l]+1
b[l]<- nums[i]
}
else {
l<- l+1
a[l]<- 1
b[l]<- nums[i+1]
}
}
return(as.numeric(paste(a, b,sep = "", collapse = "")))
}
if(n==1) {return(1)}
if(n==2) {return(11)}
else {
ans<- 11
for(i in 2:(n-1)) {
ans<- count(ans)
}
}
return(ans)
}
countAndSay(1)
countAndSay(2)
countAndSay(3)
countAndSay(4)
countAndSay(5)
countAndSay(7)
countAndSay(6)
library(gtools)
permutations(n=3, v=3, repeats.allowed = T)
permutations(n=3, r=3, repeats.allowed = T)
candidates<- c(2,3,6,7)
target<- 7
candidates<- sort(candidates)
n<- floor(target/candidates[1])
n
i=2
index<- permutations(n=i,r=i, repeats.allowed = T)
candidates[index]
matrix(candidates[index],ncol = i)
rowSums(matrix(candidates[index],ncol = i))
which(rowSums(matrix(candidates[index],ncol = i))
== target)
target=6
which(rowSums(matrix(candidates[index],ncol = i))
== target)
a<- c(1,2)
index[a,]
n<- floor(target/candidates[1])
n
c<- vector("list", n)
i=1
index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]
i=2
index<- permutations(n=i,r=i, repeats.allowed = T)
index
c[i]<- index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]
index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]
which(rowSums(matrix(candidates[index],ncol = i))
== target)
candidates[which(rowSums(matrix(candidates[index],ncol = i))
== target),]
c[i]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
c[[i]] <- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=i,r=i, repeats.allowed = T)
ans[[i]] <- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]] <- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
i=3
ans<- c(2,2,3,2,3,2,3,2,2)
ans<- matrix(ans, ncol = i)
ans
ans<- apply(ans, 1, sort)
ans
ans<- c(2,2,3,2,3,2,3,2,2)
ans<- matrix(ans, ncol = i)
ans<- apply(ans, 2, sort)
ans
ans<- c(2,2,3,2,3,2)
ans<- matrix(ans, ncol = i)
ans
apply(ans, 1, sort)
target=6
i=3
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
ans
index
candidates[index]
andidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
matrix(ans, nrow = i)
ans<- matrix(ans, nrow = i)
apply(ans, 2, sort)
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
ans<- t(apply(matrix(ans, nrow = i), 2, sort))
ans[[i]]<- ans[!duplicated(ans),]
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
i=2
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
target=7
ans<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(ans[[i]]==0) {next}
else {
ans<- t(apply(matrix(ans[[i]], nrow = i), 2, sort))
ans[[i]]<- ans[!duplicated(ans),]
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
i=1
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
ans<- t(apply(matrix(ans[[i]], nrow = i), 2, sort))
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(ans[[i]]==0) {next}
else {
ans[[i]]<- t(apply(matrix(ans[[i]], nrow = i), 2, sort))
ans[[i]]<- ans[!duplicated(ans[[i]]),]
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(ans[[i]]==0) {next}
else {
ans[[i]]<- t(apply(matrix(ans[[i]], nrow = i), 2, sort))
ans[[i]]<- ans[[i]][!duplicated(ans[[i]]),]
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[i]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(length(ans[[i]])==0) {next}
else {
ans[[i]]<- t(apply(matrix(ans[[i]], nrow = i), 2, sort))
ans[[i]]<- ans[[i]][!duplicated(ans[[i]]),]
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list", n)
k<- 1
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(length(ans[[k]])==0) {next}
else {
ans[[k]]<- t(apply(matrix(ans[[k]], nrow = i), 2, sort))
ans[[k]]<- ans[[k]][!duplicated(ans[[k]]),]
k<- k+1
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
ans<- vector("list")
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list")
k<- 1
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(length(ans[[k]])==0) {next}
else {
ans[[k]]<- t(apply(matrix(ans[[k]], nrow = i), 2, sort))
ans[[k]]<- ans[[k]][!duplicated(ans[[k]]),]
k<- k+1
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum(c(2,3,6,7), 6)
combinationSum(c(2,3,6,7), 15)
target=15
candidates=c(2,3,6,7)
i=4
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list")
k<- 1
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
matrix(candidates[index],ncol = i)
rowSums(matrix(candidates[index],ncol = i)
rowSums(matrix(candidates[index],ncol = i))
rowSums(matrix(candidates[index],ncol = i))
which(rowSums(matrix(candidates[index],ncol = i))
== target)
index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
ans[[k]]<- t(apply(matrix(ans[[k]], nrow = i), 2, sort))
ans
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
matrix(ans[[k]], ncol = i)
apply(matrix(ans[[k]], ncol = i), 1, sort)
ans[[k]]<- t(apply(matrix(ans[[k]], ncol = i), 1, sort))
ans[[k]]<- ans[[k]][!duplicated(ans[[k]]),]
ans
combinationSum<- function(candidates, target) {
library(gtools)
candidates<- sort(candidates)
n<- floor(target/candidates[1])
ans<- vector("list")
k<- 1
for(i in 1:n) {
index<- permutations(n=length(candidates),r=i, repeats.allowed = T)
ans[[k]]<- candidates[index[which(rowSums(matrix(candidates[index],ncol = i))
== target),]]
if(length(ans[[k]])==0) {next}
else {
ans[[k]]<- t(apply(matrix(ans[[k]], ncol = i), 1, sort))
ans[[k]]<- ans[[k]][!duplicated(ans[[k]]),]
k<- k+1
}
}
return(ans)
}
combinationSum(c(2,3,6,7), 7)
combinationSum(c(2,3,6,7), 6)
combinationSum(c(2,3,6,7), 15)
