index<- permutations(n=6,n=6)
index<- permutations(n=2,r=6,repeats.allowed = T)
View(index)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
return(ans)
}
Generate_Parentheses(3)
ans<- ans[-duplicated(ans),]
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[-duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[-duplicated(ans),]
duplicated(ans)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
Valid_Parentheses("()(())")
str="()(())"
punct<- c("(", ")","{", "}", "[", "]")
x<-unlist(strsplit(str, split = ""))
index<- vector("list",6)
for(i in 1:6) {
index[[i]] <- which(x==punct[i])
}
str<- "()[]{}"
x<-unlist(strsplit(str, split = ""))
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x==punct_front
x%in%punct_front
which(x%in%punct_front)
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
Valid_Parentheses<- function(str) {
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
if(x[index_front[n+1-i]]!= x[index_back[i]]) {
judge<- 0
break
}
}
}
return(as.logical(judge))
}
str<- "()[]{}"
Valid_Parentheses(str)
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
length(index_front)==length(index_back)
n<- length(index_front)
x[index_front[n+1-i]]
index_front[n+1-i]
n+1-i
i
i=1
index_front[n+1-i]
x[index_front[n+1-i]]
x[index_back[i]]
x_front<- x[index[n+1-i]]
x<-unlist(strsplit(str, split = ""))
x
i
x_front<- x[index_front[n+1-i]]
index_front[n+1-i]
index_back>index_front[n+1-i]
which.min(index_back>index_front[n+1-i])
min(index_back>index_front[n+1-i])
back<- min(index_back[index_back>index_front[n+1-i]])
Valid_Parentheses<- function(str) {
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(x_front!=x[i_back]) {
judge<- 0
break
}
}
}
return(as.logical(judge))
}
Valid_Parentheses(str)
str<- "()[]{}"
Valid_Parentheses(str)
str<- "()"
Valid_Parentheses(str)
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(x_front!=x[i_back]) {
judge<- 0
break
}
}
}
n<- length(index_front)
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
x[i_back]
which(x_front%in%punct_front)
which(x[i_back] %in% punct_back)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(which(x_front %in% punct_front)!=
which(x[i_back] %in% punct_back)) {
judge<- 0
break
}
}
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
judge<- 1
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(which(x_front %in% punct_front)!=
which(x[i_back] %in% punct_back)) {
judge<- 0
break
}
}
Valid_Parentheses<- function(str) {
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(which(x_front %in% punct_front)!=
which(x[i_back] %in% punct_back)) {
judge<- 0
break
}
}
}
return(as.logical(judge))
}
str<- "()[]{}"
Valid_Parentheses(str)
str<- "()"
Valid_Parentheses(str)
str<- "()[]{"
Valid_Parentheses(str)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
Valid_Parentheses("()(())")
str<- "()"
Valid_Parentheses(str)
Valid_Parentheses<- function(str) {
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(which(x_front %in% punct_front)!=
which(x[i_back] %in% punct_back)) {
judge<- 0
break
}
}
}
return(as.logical(judge))
}
str<- "()"
str<- "()[]{}"
Valid_Parentheses(str)
v<- rep(c("(", ")"),n)
n=3
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
i=134
a<- v[index[i,]]
a<- paste(a, collapse = "")
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
Valid_Parentheses("()(())")
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
if
(index_back > index_front)
a=0
index_back > index_front
Valid_Parentheses<- function(str) {
punct_front<- c("(", "[", "{")
punct_back<- c(")", "]", "}")
x<-unlist(strsplit(str, split = ""))
index_front<- which(x%in%punct_front)
index_back<- which(x%in%punct_back)
judge<- 0
if(sum(index_front > index_back)==0) {
if(length(index_front)==length(index_back)) {
judge<- 1
n<- length(index_front)
for(i in 1:n) {
x_front<- x[index_front[n+1-i]]
i_back<- min(index_back[index_back>index_front[n+1-i]])
if(which(x_front %in% punct_front)!=
which(x[i_back] %in% punct_back)) {
judge<- 0
break
}
}
}
}
return(as.logical(judge))
}
str<- "()[]{}"
Valid_Parentheses(str)
Valid_Parentheses("()(())")
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- cbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(3)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
v<- rep(c("(", ")"),n)
index<- permutations(n=6,r=6)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
!duplicated(ans)
ans[!duplicated(ans),]
ans<- ans[!duplicated(ans),]
t(ans)
Generate_Parentheses(3)
Generate_Parentheses(4)
index<- permutations(n=2*n,r=2*n)
Generate_Parentheses<- function(n) {
library(gtools)
v<- rep(c("(", ")"),n)
index<- permutations(n=2*n,r=2*n)
ans<- NULL
for(i in 1:nrow(index)) {
a<- v[index[i,]]
a<- paste(a, collapse = "")
if(Valid_Parentheses(a)) {ans<- rbind(ans,a)}
}
ans<- ans[!duplicated(ans),]
return(ans)
}
Generate_Parentheses(4)
lists<- list(c(1,2,3), c(4,5))
ans<- NULL
for(i in 1:k) {
ans<- c(ans, lists[[i]])
}
k=2
for(i in 1:k) {
ans<- c(ans, lists[[i]])
}
return(list(ans))
list(ans)
sol_23<- function(k, lists) {
ans<- NULL
for(i in 1:k) {
ans<- c(ans, lists[[i]])
}
return(list(ans))
}
k<- length(lists)
sol_23(lists)
sol_23<- function(lists) {
ans<- NULL
k<- length(lists)
for(i in 1:k) {
ans<- c(ans, lists[[i]])
}
return(list(ans))
}
lists<- list(c(1,2,3), c(4,5))
sol_23(lists)
l<- 1:4
n<- length(l)
l<- 1:4
n<- length(l)
i<- 1
while(i<=(n-1)) {
a<- l[i]
l[i]<- l[i+1]
l[i+1]<- a
i<- i+2
}
swap<- function(l) {
n<- length(l)
i<- 1
while(i<=(n-1)) {
a<- l[i]
l[i]<- l[i+1]
l[i+1]<- a
i<- i+2
}
return(l)
}
swap(c(1,2,3,4))
5/4
5//4
floor(5/4)
floor(5/2)
l<- 1:5
n<- length(l)
k=2
num<- floor(n/k)
i=1
ll<- l[((i-1)*k+1):(i*k)]
ans<- NULL
for(i in 1:num) {
subl<- l[((i-1)*k+1):(i*k)]
subans<- rep(NA, k)
for(j in 1:k) {
subans[k+1-j]<- subl[j]
}
ans<- c(ans, subans)
}
ans
tail<- l[-(1:(num*k))]
ans<- c(ans, tail)
reverse_k_group<- function(l,k) {
n<- length(l)
num<- floor(n/k)
ans<- NULL
for(i in 1:num) {
subl<- l[((i-1)*k+1):(i*k)]
subans<- rep(NA, k)
for(j in 1:k) {
subans[k+1-j]<- subl[j]
}
ans<- c(ans, subans)
}
tail<- l[-(1:(num*k))]
ans<- c(ans, tail)
return(ans)
}
l<- c("a","b","c","d","e")
reverse_k_group(l, 2)
reverse_k_group(l, 3)
l<- c("a","b","c","d","e","f","g")
reverse_k_group(l, 3)
l<- c("a","b","c","d","e","f")
reverse_k_group(l, 3)
reverse_k_group(l, 2)
reverse_k_group(l, 4)
nums<- c(1,1,2)
r<- nums[!duplicated(nums)]
r
removeDuplicates<- function(nums) {
r<- nums[!duplicated(nums)]
return(list(r, length(r)))
}
removeDuplicates(nums)
removeDuplicates<- function(nums) {
r<- nums[!duplicated(nums)]
return(list(number= r, length= length(r)))
}
nums<- c(1,1,2)
removeDuplicates(nums)
nums<- c(1,1,2,3,3,3,3,4,5,1)
removeDuplicates(nums)
removeElement<- function(nums, val) {
ans<- nums[!(val%in%nums)]
return(list(number= ans, length= length(ans)))
}
removeElement(c(3,2,2,3), 3)
nums
val%in%nums
val=2
val%in%nums
ans<- nums[!(val==nums)]
ans
removeElement<- function(nums, val) {
ans<- nums[!(val==nums)]
return(list(number= ans, length= length(ans)))
}
removeElement(c(3,2,2,3), 3)
removeElement(c(3,2,1,2,3), 3)
