index<- combinations(n1, n1-n2)
sub_s<-t(apply(index, 1, function(x) {string_s[-x]}))
return(sum(colSums(sub_s==string_t)==n2))
}
}
numDistinct<- function(s, t) {
n1<- nchar(s); n2<- nchar(t)
if(n2>n1) {return("error")}
if(n2==n1 & s=!t) {return("error")}
if(n2==n1 & s==t) {return(1)}
else {
string_s<- unlist(strsplit(s, ""))
string_t<- unlist(strsplit(t, ""))
index<- combinations(n1, n1-n2)
sub_s<-t(apply(index, 1, function(x) {string_s[-x]}))
return(sum(colSums(sub_s==string_t)==n2))
}
}
numDistinct<- function(s, t) {
n1<- nchar(s); n2<- nchar(t)
if(n2>n1) {return("error")}
if(n2==n1 & s=!t) {return("error")}
if(n2==n1 & s==t) {return(1)}
else {
string_s<- unlist(strsplit(s, ""))
string_t<- unlist(strsplit(t, ""))
index<- combinations(n1, n1-n2)
sub_s<-t(apply(index, 1, function(x) {string_s[-x]}))
return(sum(colSums(sub_s==string_t)==n2))
}
}
numDistinct<- function(s, t) {
n1<- nchar(s); n2<- nchar(t)
if(n2>n1) {return("error")}
if(n2==n1 & s!=t) {return("error")}
if(n2==n1 & s==t) {return(1)}
else {
string_s<- unlist(strsplit(s, ""))
string_t<- unlist(strsplit(t, ""))
index<- combinations(n1, n1-n2)
sub_s<-t(apply(index, 1, function(x) {string_s[-x]}))
return(sum(colSums(sub_s==string_t)==n2))
}
}
s = "rabbbit"; t = "rabit"
s = "rabbbit"; t = "rabbit"
numDistinct(s, t)
numDistinct<- function(s, t) {
n1<- nchar(s); n2<- nchar(t)
if(n2>n1) {return("error")}
if(n2==n1 & s!=t) {return("error")}
if(n2==n1 & s==t) {return(1)}
else {
string_s<- unlist(strsplit(s, ""))
string_t<- unlist(strsplit(t, ""))
index<- combinations(n1, n1-n2)
sub_s<-apply(index, 1, function(x) {string_s[-x]})
return(sum(colSums(sub_s==string_t)==n2))
}
}
s = "rabbbit"; t = "rabbit"
numDistinct(s, t)
s = "rabbbit"; t = "rabbt"
numDistinct(s, t)
numDistinct("ABCDE", "AEC")
numDistinct("ABCDE", "ACE")
generate<- function(numRows) {
if(numRows==1) {return(list(1))}
if(numRows==2) {return(c(1,1))}
else {
ans<- rep(NA, numRows); ans[c(1,numRows)]<- 1
for(i in 2:(numRows-1)) {
ans[i]<- Recall(numRows-1)[i-1]+Recall(numRows-1)[i]
}
return(ans)
}
}
generate(5)
generate(10)
generate(6)
generate(7)
generate(8)
generate(9)
generate<- function(numRows) {
if(numRows==1) {return(1)}
if(numRows==2) {return(c(1,1))}
else {
ans<- rep(NA, numRows); ans[c(1,numRows)]<- 1;ans
for(i in 2:(numRows-1)) {
ans[i]<- Recall(numRows-1)[i-1]+Recall(numRows-1)[i]
}
return(ans)
}
}
generate(10)
generate<- function(numRows) {
if(numRows==1) {return(1)}
if(numRows==2) {return(matrix(c(1,NA),c(1,1)))}
else {
ans<- matrix(NA, nrow = numRows, ncol = numRows)
ans[,1]<- 1
for(i in 3:numRows) {
for(j in 2:(i-1)) {ans[i,j]<- ans[i-1,j-1]+ans[i-1,j]}
ans[i,j+1]<- 1
}
}
return(ans)
}
generate(5)
ans[,1]<- 1; ans[2,c(1,2)]<- 1
ans
generate<- function(numRows) {
if(numRows==1) {return(1)}
if(numRows==2) {return(matrix(c(1,NA),c(1,1)))}
else {
ans<- matrix(NA, nrow = numRows, ncol = numRows)
ans[,1]<- 1; ans[2,c(1,2)]<- 1;
for(i in 3:numRows) {
for(j in 2:(i-1)) {ans[i,j]<- ans[i-1,j-1]+ans[i-1,j]}
ans[i,j+1]<- 1
}
}
return(ans)
}
generate(5)
ans<- generate(5)
is.na(ans)
is.na(ans)<- ""
ans
ifelse(is.na(ans), "", ans)
generate<- function(numRows) {
if(numRows==1) {return(1)}
if(numRows==2) {return(matrix(c(1,NA),c(1,1)))}
else {
ans<- matrix(NA, nrow = numRows, ncol = numRows)
ans[,1]<- 1; ans[2,c(1,2)]<- 1;
for(i in 3:numRows) {
for(j in 2:(i-1)) {ans[i,j]<- ans[i-1,j-1]+ans[i-1,j]}
ans[i,j+1]<- 1
}
}
ans<- ifelse(is.na(ans), "", ans)
return(ans)
}
ans<- generate(5)
generate(5)
generate<- function(numRows) {
if(numRows==1) {return(1)}
if(numRows==2) {return(matrix(c(1,NA),c(1,1)))}
else {
ans<- matrix(NA, nrow = numRows, ncol = numRows)
ans[,1]<- 1; ans[2,c(1,2)]<- 1;
for(i in 3:numRows) {
for(j in 2:(i-1)) {ans[i,j]<- ans[i-1,j-1]+ans[i-1,j]}
ans[i,j+1]<- 1
}
}
return(ans)
}
generate(5)
generate(8)
generate(11)
log(8,2)
log(7,2)
log(11,2)
log(15,2)
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==2) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
for(i in down:min(up,length(root))) {
sub_root<- c(root[i], root[2*i], root[2*i]+1)
if(Recall(sub_root)) {return(TRUE)}
else {return(FALSE)}
}
}
}
root<- c(2,1,3)
n_tree<- floor(log(length(root), 2))
n_tree
log(3,2)
n_tree<- ceiling(log(length(root), 2))
l
n_tree<- ceiling(log(length(root), 2))
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
down<- 2^(n_tree-1); up<- 2^n_tree-1
down
up
root<- c(2,1,3,4,5,6,7)
n_tree<- ceiling(log(length(root), 2))
n_tree
down<- 2^(n_tree-1); up<- 2^n_tree-1
down
up
n_tree<- floor(log(length(root), 2))
root<- c(2,1,3,4,5,6,7)
n_tree<- floor(log(length(root), 2))
down<- 2^(n_tree-1); up<- 2^n_tree-1
down
up
min(up,length(root))
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2
for(i in down: min(up,limit)) {
sub_root<- c(root[i], root[2*i], root[2*i]+1)
if(Recall(sub_root)) {return(TRUE)}
else {return(FALSE)}
}
}
}
root<- c(2,1,3,4,5,6,7)
isValidBST()
isValidBST(root)
n_tree<- floor(log(length(root), 2))
n_tree
down<- 2^(n_tree-1); up<- 2^n_tree-1
down
up
limit<- length(root) %/% 2
limit
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2
for(i in down: min(up,limit)) {
sub_root<- c(root[i], root[2*i], root[2*i+1])
if(Recall(sub_root)) {return(TRUE)}
else {return(FALSE)}
}
}
}
root<- c(2,1,3,4,5,6,7)
isValidBST(root)
root<- c(2,1,3)
n_tree<- floor(log(length(root), 2))
n_tree
root[2]<root[1] & root[3]>root[1]
root[2]>root[1] | root[3]<root[1]
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2
for(i in down: min(up,limit)) {
subroot<- c(root[i], root[2*i], root[2*i+1])
if(root[2]>root[1] | root[3]<root[1]) {return(FALSE)}
}
Recall(root[-(2*down:length(root))])
}
}
root<- c(2,1,3,4,5,6,7)
isValidBST(root)
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2; judge<- 1;
for(i in down: min(up,limit)) {
subroot<- c(root[i], root[2*i], root[2*i+1])
if(root[2]>root[1] | root[3]<root[1]) {judge<- 0}
}
if(judge==1) {return(Recall(root[-(2*down:length(root))]))}
else (return(FALSE))
}
}
root<- c(2,1,3,4,5,6,7)
isValidBST(root)
root[-(2*down:length(root))]
root[-((2*down):length(root))]
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)} }
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2; judge<- 1;
for(i in down: min(up,limit)) {
subroot<- c(root[i], root[2*i], root[2*i+1])
if(root[2]>root[1] | root[3]<root[1]) {judge<- 0}
}
if(judge==1) {return(Recall(root[-((2*down):length(root))]))}
else (return(FALSE))
}
}
root<- c(2,1,3,4,5,6,7)
isValidBST(root)
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)}
else {return(FALSE)}}
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2; judge<- 1;
for(i in down: min(up,limit)) {
subroot<- c(root[i], root[2*i], root[2*i+1])
if(!Recall(subroot)) {return(FALSE)}
}
}
}
root<- c(1,2,3,4,5,6,7)
isValidBST(root)
root<- c(1,2,3)
isValidBST(root)
root<- c(2,1,3)
isValidBST(root)
NULL>1
root<- c(3,2,4,1,5,2,6)
isValidBST(root)
isValidBST(root)
isValidBST<- function(root) {
n_tree<- floor(log(length(root), 2))
if(n_tree==1) {
if(root[2]<root[1] & root[3]>root[1]) {return(TRUE)}
else {return(FALSE)}}
else {
down<- 2^(n_tree-1); up<- 2^n_tree-1
limit<- length(root) %/% 2; judge<- 1;
for(i in down: min(up,limit)) {
subroot<- c(root[i], root[2*i], root[2*i+1])
if(!Recall(subroot)) {return(FALSE)}
}
return(TRUE)
}
}
root<- c(3,2,4,1,5,2,6)
isValidBST(root)
root<- c(3,2,4,1,5,7,6)
isValidBST(root)
root<- c(3,2,4,1,5,2,6)
isValidBST(root)
root<- c(2,1,3,4,5,6,7)
isValidBST(root)
isSymmetric <- function(root) {
ntree<- floor(log(length(root), 2))
if(ntree==1) {
if(root[3]==root[2]) {return(TRUE)}
else {return(FALSE)}
}
else {
down<- 2^ntree; up<- 2^ntree-1; mid<- (down+up-1)/2;
if(root[down:mid]==root[up:(mid+1)]) {
Recall(root[-(down:up)])}
else {return(FALSE)}
}
}
isSymmetric(c(1,2,2,3,4,4,3))
isSymmetric <- function(root) {
ntree<- floor(log(length(root), 2))
if(ntree==1) {
if(root[3]==root[2]) {return(TRUE)}
else {return(FALSE)}
}
else {
down<- 2^ntree; up<- 2^ntree-1; mid<- (down+up-1)/2;
if(identical(root[down:mid],root[up:(mid+1)])) {
Recall(root[-(down:up)])}
else {return(FALSE)}
}
}
isSymmetric(c(1,2,2,3,4,4,3))
root<- c(1,2,2,3,4,4,3)
ntree<- floor(log(length(root), 2))
down<- 2^ntree; up<- 2^ntree-1; mid<- (down+up-1)/2;
down<- 2^ntree; up<- 2^(ntree+1)-1; mid<- (down+up-1)/2;
isSymmetric <- function(root) {
ntree<- floor(log(length(root), 2))
if(ntree==1) {
if(root[3]==root[2]) {return(TRUE)}
else {return(FALSE)}
}
else {
down<- 2^ntree; up<- 2^(ntree+1)-1; mid<- (down+up-1)/2;
if(identical(root[down:mid],root[up:(mid+1)])) {
Recall(root[-(down:up)])}
else {return(FALSE)}
}
}
root<- c(1,2,2,3,4,4,3)
isSymmetric(c(1,2,2,3,4,4,3))
root<- c(3,9,20,NULL,NULL,15,7)
ntree<- floor(log(length(root), 2))
ntree
i=3
head<- 2^(i-1); tail<- min(2^i-1, length(root));
head
tail
length(root)
root[is.null(root)]<- 0
root
root<- c(3,9,20,NULL,NULL,15,7)
numDistinct<- function(s, t) {
n1<- nchar(s); n2<- nchar(t)
if(n2>n1) {return("error")}
if(n2==n1 & s!=t) {return("error")}
if(n2==n1 & s==t) {return(1)}
else {
string_s<- unlist(strsplit(s, ""))
string_t<- unlist(strsplit(t, ""))
index<- combinations(n1, n1-n2)
sub_s<-apply(index, 1, function(x) {string_s[-x]})
return(sum(colSums(sub_s==string_t)==n2))
}
}
root[is.null(root)]<- 0
root<- c(3,9,20,NULL,NULL,15,7)
root[is.null(root)]<- 0
root
root<- c(3,9,20,null,null,15,7)
root<- c(3,9,20,NA,NA,15,7)
root<- c(3,9,20,NA,NA,15,7)
root[is.na(root)]<- 0
ntree<- floor(log(length(root), 2))
ntree
length(root)
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tail
levelOrder<- function(root) {
ntree<- floor(log(length(root), 2))
ans<- vector("list", ntree+1)
for(i in (ntree+1):1) {
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree[is.na(tree)]<- NULL;
ans[[i]]<- tree
}
return(ans)
}
levelOrder(root)
levelOrder<- function(root) {
ntree<- floor(log(length(root), 2))
ans<- vector("list", ntree+1)
for(i in (ntree+1):1) {
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree[is.na(tree)]<- NULL;
ans[[i]]<- tree
}
return(ans)
}
root<- c(3,9,20,NA,NA,15,7)
levelOrder(root)
levelOrder<- function(root) {
ntree<- floor(log(length(root), 2))
ans<- vector("list", ntree+1)
for(i in (ntree+1):1) {
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree[is.na(tree)]<- NULL;
ans[[i]]<- tree
}
return(ans)
}
root<- c(3,9,20,NA,NA,15,7)
levelOrder(root)
root<- c(3,9,20,0,0,15,7)
levelOrder(root)
i=3
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree[is.na(tree)]<- NULL;
tree
root<- c(3,9,20,NA,NA,15,7)
tree<- root[head:tail]; tree[is.na(tree)]<- NULL;
is.na(tree)
tree[is.na(tree)]
tree[is.na(tree)]<-1
tree
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree<- tree[-is.na(tree)];
root<- c(3,9,20,NA,NA,15,7)
tree<- root[head:tail]; tree<- tree[-is.na(tree)];
tree
is.na(tree)
root<- c(3,9,20,NA,NA,15,7)
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree<- tree[!is.na(tree)];
tree
levelOrder<- function(root) {
ntree<- floor(log(length(root), 2))
ans<- vector("list", ntree+1)
for(i in (ntree+1):1) {
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree<- tree[!is.na(tree)];
ans[[i]]<- tree
}
return(ans)
}
root<- c(3,9,20,NA,NA,15,7)
levelOrder(root)
zigzagLevelOrder<- function(root) {
ntree<- floor(log(length(root), 2))
ans<- vector("list", ntree+1)
for(i in (ntree+1):1) {
head<- 2^(i-1); tail<- min(2^i-1, length(root));
tree<- root[head:tail]; tree<- tree[!is.na(tree)];
if(i%%2==0) {  ans[[i]]<- rev(tree) }
else { ans[[i]]<- tree }
}
return(ans)
}
zigzagLevelOrder(c(3,9,20,NA,NA,15,7))
