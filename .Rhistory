n2<- length(num2)
mat<- matrix(0, nrow = n1*n2, ncol = n1+n2)
n<- 1
for(i1 in 1:n1) {
for(i2 in 1:n2) {
mat[n, (i1+i2-1)]<- (num1[i1]*num2[i2])%/%10
mat[n, (i1+i2)]<- (num1[i1]*num2[i2])%%10
n<- n+1
}
}
mat
k<- 1
tens<- 0
for(j in rev(1:(n1+n2))) {
a<- colSums(mat[,i])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
ans<- rep(0,(n1+n2))
ans<- rep(0,(n1+n2))
for(j in rev(1:(n1+n2))) {
a<- colSums(mat[,i])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
for(j in rev(1:(n1+n2))) {
a<- sum(mat[,i])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
ans
r
k<- 1
tens<- 0
ans<- rep(0,(n1+n2))
for(j in rev(1:(n1+n2))) {
a<- sum(mat[,j])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
ans
mat<- matrix(c(8,3,8,2,9,1), nrow = 2)
mat
n1=1
n2=2
k<- 1
tens<- 0
ans<- rep(0,(n1+n2))
for(j in rev(1:(n1+n2))) {
a<- sum(mat[,j])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
ans
mat<- matrix(c(8,3,8,0,9,1), nrow = 2)
k<- 1
tens<- 0
ans<- rep(0,(n1+n2))
for(j in rev(1:(n1+n2))) {
a<- sum(mat[,j])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
MultiplyStrings<- function(num1,num2) {
n1<- length(num1)
n2<- length(num2)
mat<- matrix(0, nrow = n1*n2, ncol = n1+n2)
n<- 1
for(i1 in 1:n1) {
for(i2 in 1:n2) {
mat[n, (i1+i2-1)]<- (num1[i1]*num2[i2])%/%10
mat[n, (i1+i2)]<- (num1[i1]*num2[i2])%%10
n<- n+1
}
}
k<- 1
tens<- 0
ans<- rep(0,(n1+n2))
for(j in rev(1:(n1+n2))) {
a<- sum(mat[,j])+tens
tens<- a%/%10
ans[k]<- a%%10
k<- k+1
}
if(a >= 10) {ans[k]<- tens}
return(rev(ans))
}
MultiplyStrings(c(9,9,9), c(9,9))
MultiplyStrings(c(9,9,9,9), c(9,9))
MultiplyStrings(c(9,9,9,9), c(9,9,8))
MultiplyStrings(c(9,7,9,9), c(9,9,8))
MultiplyStrings(c(1,9,7,9,9), c(9,9,8))
p="a*?"
pattern<- strsplit(p ,split = "")
pattern<- unlist(strsplit(p ,split = ""))
pattern<- ifelse(pattern=="?", ".{1}", pattern)
pattern
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(pattern=="?", ".{1}", pattern)
expr<- ifelse(pattern=="*", ".*", pattern)
gregexpr(pattern = expr, s)
p="?*"
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(pattern=="?", ".{1}", pattern)
expr<- ifelse(pattern=="*", ".*", pattern)
gregexpr(pattern = expr, s)
s="ab"
gregexpr(pattern = expr, s)
expr<- paste(expr, collapse = "")
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(pattern=="?", ".{1}", pattern)
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(pattern=="?", ".{1}", expr)
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(pattern=="?", ".{1}", expr)
p="?*"
s="ab"
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(expr=="?", ".{1}", expr)
expr<- ifelse(expr=="*", ".*", expr)
expr<- paste(expr, collapse = "")
gregexpr(pattern = expr, s)
g<- gregexpr(pattern = expr, s)
g[[1]]
g
g[1]
g[[2]]
g[[1]][1]
g[[1]][2]
summary(g)
g$"useBytes"
g["useBytes"]
g<- regmatches(s, regexpr(pattern = expr, s))
isMatch<- function(s, p) {
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(expr=="?", ".{1}", expr)
expr<- ifelse(expr=="*", ".*", expr)
expr<- paste(expr, collapse = "")
if(regmatches(s, regexpr(pattern = expr, s))==s) {return(TRUE)}
else {return(FALSE)}
}
isMatch("aa","a")
isMatch("aa","aa")
isMatch("aa", "*") ? true
isMatch("aa", "*")
isMatch("aab", "c*a*b")
isMatch<- function(s, p) {
if(length(p)<= length(s)) {
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(expr=="?", ".{1}", expr)
expr<- ifelse(expr=="*", ".*", expr)
expr<- paste(expr, collapse = "")
if(regmatches(s, regexpr(pattern = expr, s))==s) {return(TRUE)}
else {return(FALSE)}
}
else {return(FALSE)}
}
isMatch("aab", "c*a*b")
isMatch<- function(s, p) {
if(nchar(p)<= nchar(s)) {
expr<- unlist(strsplit(p ,split = ""))
expr<- ifelse(expr=="?", ".{1}", expr)
expr<- ifelse(expr=="*", ".*", expr)
expr<- paste(expr, collapse = "")
if(regmatches(s, regexpr(pattern = expr, s))==s) {return(TRUE)}
else {return(FALSE)}
}
else {return(FALSE)}
}
isMatch("aab", "c*a*b")
isMatch("aa","a")
isMatch("aa","aa")
isMatch("aa", "*")
isMatch("aab", "c*a*b")
isMatch("ab", "?*")
isMatch("aab", "c*a*b")
nums=c(2,3,1,1,4)
jump<- function(nums) {
n<- length(nums)
b<- 0
for(i in 1:n) {
a<- i+1
b<- max(b, i+nums[i])
if(b>=n) {break}
}
return(i)
}
jump(c(2,3,1,1,4))
jump(c(2,3,1,1,1,4))
i=2
a<- i+1
b<- max(b, i+nums[i])
b<- 0
b<- max(b, i+nums[i])
b
i=3
b<- max(b, i+nums[i])
b
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 0
for(i in 1:n) {
if(b<i) {
a<- i+1
k<- k+1
}
b<- max(b, i+nums[i])
}
return(K)
}
jump(c(2,3,1,1,1,4))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 0
for(i in 1:n) {
if(b<i) {
a<- i+1
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,1,4))
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 1
for(i in 1:n) {
if(b<i) {
a<- i+1
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump(c(2,3,1,1,4,1))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 1
for(i in 1:n) {
if(b<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4,1))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 0
for(i in 1:n) {
if(b<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4,1))
i=1
b<- max(b, i+nums[i])
b
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 0
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4,1))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 1
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4,1))
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
now<- 0
k<- 1
for(i in 1:n) {
if(last<i) {
last<- now
k<- k+1
}
now<- max(now, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
last<- 0
now<- 0
k<- 1
for(i in 1:n) {
if(last<i) {
last<- now
k<- k+1
}
now<- max(now, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 1
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
b<- 0
k<- 1
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump<- function(nums) {
n<- length(nums)
a<- 0
b<- 0
k<- 0
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
c(2,3,1,1,4)
nums=c(2,3,1,1,4)
i=1
b<- max(b, i+nums[i])
b<- 0
b<- max(b, i+nums[i])
jump<- function(nums) {
n<- length(nums)
a<- 1
b<- 0
k<- 0
for(i in 1:n) {
if(a<i) {
a<- b
k<- k+1
}
b<- max(b, i+nums[i])
}
return(k)
}
jump(c(2,3,1,1,4))
jump(c(2,3,1,1,4,1))
jump(c(2,3,1,1,4,1,1))
library(gtools)
permutations
permutations(n=4,r=4)
permute(1:10)
?Recall
a<- "bca"
sort(a)
strs<- "bca"
a<- unlist(strsplit(strs, split = ""))
a
sort(a)
a<- sapply(strs, strsplit, split="")
strs<- "eat", "tea", "tan", "ate", "nat", "bat"
strs<- c("eat", "tea", "tan", "ate", "nat", "bat")
a<- sapply(strs, strsplit, split="")
a<- lapply(a, sort)
table(a)
matrix(a)
unlist(a)
summary(a)
a<- unlist(lapply(a, sort))
a<- sapply(strs, strsplit, split="")
a<- unlist(lapply(a, sort))
a<- sapply(strs, strsplit, split="")
a<- matrix(unlist(lapply(a, sort)), nrow = length(strs))
a
a<- sapply(strs, strsplit, split="")
a<- lapply(a, sort)
rownum<- 1:length(strs)
a
a[[2]]
a[[3]]
a==a[[1]]
a[[1]]
a[[]]==a[[1]]
a[[2]]==a[[1]]
a[[3]]==a[[1]]
unname(a)
a<- unname(a)
a== a[[1]]
as.matrix(a)
a<- as.matrix(a)
a
a[1]
a[2]
a[3]
a[,3]
a<- lapply(a, paste, collapse="")
a<- unlist(a)
a
which(a==a[1])
rownum<- 1:length(strs)
index<- which(a==a[i])
rownum[-index]
index<- vector("list")
for(i in rownum) {
index<- list(index, which(a==a[i]))
rownum<- rownum[-index]
}
rownum<- 1:length(strs)
index<- vector("list")
for(i in rownum) {
index<- list(index, which(a==a[i]))
rownum<- rownum[-index]
}
index<- vector("list")
list(index, which(a==a[i]))
index<- NULL
index<- list(index, which(a==a[i]))
index<- vector("list")
k<-1
for(i in rownum) {
index[[k]]<- which(a==a[i])
rownum<- rownum[-index]
k<- k+1
}
index<- vector("list")
k<-1
for(i in rownum) {
index[[k]]<- which(a==a[i])
# rownum<- rownum[-index]
k<- k+1
}
table(a)
unique(a)
a==unique(a)
summary(a)
lapply(unique(a), function(x) {which(a==x)})
a[index]
ans<- lapply(index, a[index])
ans<- lapply(index, function(x) {a[x]})
index<- lapply(unique(a), function(x) {which(a==x)})
index<- sapply(unique(a), function(x) {which(a==x)})
ans<- sapply(index, function(x) {a[x]})
index<- lapply(unique(a), function(x) {which(a==x)})
ans<- sapply(index, function(x) {a[x]})
index<- lapply(unique(a), function(x) {which(a==x)})
ans<- sapply(index, function(x) {a[x]})
ans<- lapply(index, function(x) {a[x]})
ans<- lapply(index, function(x) {strs[x]})
groupAnagrams<- function(strs) {
a<- sapply(strs, strsplit, split="")
a<- lapply(a, sort)
a<- unlist(lapply(a, paste, collapse=""))
index<- lapply(unique(a), function(x) {which(a==x)})
ans<- lapply(index, function(x) {strs[x]})
return(ans)
}
groupAnagrams(c("eat", "tea", "tan", "ate", "nat", "bat"))
