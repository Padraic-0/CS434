isScramble(a,b)
S
S
isScramble<- function(s1, s2) {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
if(n==1) {if(string1==string2) {return(0)}
else {return(-1)}}
else {
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
ans1<- Recall(ss11,ss21)
return(cbind(ans1, Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_2, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
return(cbind(0, Recall(ss11,ss22)))
}
else {next}
}
}
return(-1)
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
if(n==1) {if(string1==string2) {return(0)}
else {return(-1)}}
else {
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(c(Recall(ss11, ss21), Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(c(Recall(ss11,ss22), Recall(ss12,ss21)))
}
else {next}
}
}
return(-1)
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
if(n==1) {if(string1==string2) {return(0)}
else {return(-1)}}
else {
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(c(Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(c(Recall(ss12,ss21)))
}
else {next}
}
}
return(-1)
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
if(n==1) {if(string1==string2) {return(0)}
else {return(-1)}}
else {
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(Recall(ss12,ss22))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(Recall(ss12,ss21))}
else {next}
}
return(-1)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
setequal(sub1_1,sub2_1)
etequal(sub1_2, sub2_2)
setequal(sub1_2, sub2_2)
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
s1=ss11
s2=ss21
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
i=1
sub1_1<- string1[1:i]
sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]
sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
setequal(sub1_1,sub2_1)
setequal(sub1_2, sub2_2)
setequal(sub1_1, sub2_2)
setequal(sub1_2,sub2_1)
ss12
ss21
ss1=ss12
ss2=ss21
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
s1=ss12
s2=ss21
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
if(n==1) {if(string1==string2) {return(0)}
else {return(-1)}}
string1==string2
isScramble<- function(s1, s2) {
if(s1==s2) {return(0)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(Recall(ss12,ss22))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(Recall(ss12,ss21))
}
else {next}
}
return(-1)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(s1==s2) {return(0)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(c(Recall(ss11,ss21), Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(Recall(ss12,ss21))
}
else {next}
}
return(-1)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(s1==s2) {return(0)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(setequal(sub1_1,sub2_1)& setequal(sub1_2, sub2_2)) {
return(cbind(Recall(ss11,ss21), Recall(ss12,ss22)))
}
else {if(setequal(sub1_1, sub2_2)& setequal(sub1_2,sub2_1)) {
return(Recall(ss12,ss21))
}
else {next}
}
return(-1)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(Recall(sub1_1,sub2_1)& Recall(sub1_2, sub2_2)) {
return(TRUE)
}
else {if(Recall(sub1_1, sub2_2)& Recall(sub1_2,sub2_1)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
string1<- unlist(strsplit(s1,""))
string2<- unlist(strsplit(s2,""))
n<- length(string1)
for(i in 1:n) {sub1_1<- string1[1:i]; sub1_2<- string1[-(1:i)]
sub2_1<- string2[1:i]; sub2_2<- string2[-(1:i)]
ss11<- paste(sub1_1, collapse = "")
ss21<- paste(sub2_1, collapse = "")
ss12<- paste(sub1_2, collapse = "")
ss22<- paste(sub2_2, collapse = "")
if(isScramble(sub1_1,sub2_1)& isScramble(sub1_2, sub2_2)) {
return(TRUE)
}
else {if(isScramble(sub1_1, sub2_2)& isScramble(sub1_2,sub2_1)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
a<- "great"; b<- "rgtae"
isScramble(a,b)
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
n<- nchar(s1)
for(i in 1:n) {
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
if(Recall(ss11,ss21)& Recall(ss12, ss22)) {
return(TRUE)
}
else {if(Recall(ss11, ss22)& Recall(ss12,ss21)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
isScramble(a,b)
a<- "great"; b<- "rgtae"
isScramble(a,b)
s1<- "great"; s2<- "rgtae"
n<- nchar(s1)
i=1
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
s1<- "great"; s2<- "rgtae"
n<- nchar(s1)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
i=n
isScramble<- function(s1, s2) {
if(nchar(s1)!= nchar(s2)) {return(FALSE)}
if(s1==s2) {return(TRUE)}
else {
n<- nchar(s1)
for(i in 1:(n-1)) {
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
if(Recall(ss11,ss21)& Recall(ss12, ss22)) {
return(TRUE)
}
else {if(Recall(ss11, ss22)& Recall(ss12,ss21)) {
return(TRUE)
}
}
return(FALSE)
}
}
}
s1<- "great"; s2<- "rgtae"
isScramble(s1,s2)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
i=2
ss11<- substr(s1,1,i); ss12<- substr(s1,i+1,n)
ss21<- substr(s2,1,i); ss22<- substr(s2,i+1,n)
options()
options(expressions)
options()$expressions
options(expressions = 100000)
isScramble(s1,s2)
isScramble(s1,s2)
dd
"dd"
Rscript --max-ppsize=500000
Rscript --max-ppsize=500000 [RFILE]
--max-ppsize=500000 [RFILE]
--max-ppsize=500000
--max-ppsize
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2)
nums1<- c(nums1, nums2)
for(k in (i+j):1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1}
else {nums1[k]<- nums2[j]; j<- j-1}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2)
nums1<- c(nums1, nums2)
for(k in (i+j):1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1}
else {nums1[k]<- nums2[j]; j<- j-1}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge<- function(nums1, nums2) {
i<- length(nums1); j<- length(nums2); k<- i+j
nums1<- c(nums1, nums2)
while(j>=1) {
if(nums1[i]>=nums2[j]) {nums1[k]<- nums1[i]; i<- i-1; k<-k-1;}
else {nums1[k]<- nums2[j]; j<- j-1;k<-k-1;}
}
return(nums1)
}
mymerge(c(3,5,7,8,10), c(4,5,9,10))
mymerge(c(3,5,7,8,10), c(4,6,9,10))
?strtoi
n=2
permutations(n, n, c(0,1), repeats.allowed = T)
library(gtools)
permutations(n, n, c(0,1), repeats.allowed = T)
n=3
permutations(n, n, c(0,1), repeats.allowed = T)
permutations(n, n, c(0,0,1), repeats.allowed = T)
merge(0:1,0:1)
merge(0:1,0:1,0:1)
merge(merge(0:1,0:1),0:1)
permutations(n = 5, r = 5)
permutations(n = 3, r = 3, c(0,1))
permutations(n = 3, r = 3, c(0,1), repeats.allowed = T)
permutations(n = 3, r = 3, c(0,0,1), repeats.allowed = T)
permutations(n = 3, r = 2, c(0,0,1), repeats.allowed = T)
permutations(n = 2, r = 2, c(0,0,1), repeats.allowed = T)
permutations(n = 3, r = 3, c(0,0,1,1), repeats.allowed = T)
permutations(n = 3, r = 3, repeats.allowed = T)
permutations(n = 2, r = 3, repeats.allowed = T)
permutations(n = 2, r = 4, repeats.allowed = T)
nums<- apply(permutations(n = 2, r = n), 1,
function(x) {c(0,1)[x]})
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
nums
apply(nums, 2, function(x) {
strtoi(as.character(x), base = 2L)})
strtoi("000",base = 2L)
strtoi("001",base = 2L)
strtoi("010",base = 2L)
strtoi("011",base = 2L)
strtoi("111",base = 2L)
apply(nums, 2, function(x) {
strtoi(paste(as.character(x),collapse = ""), base = 2L)})
n=2
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
apply(nums, 2, function(x) {
strtoi(paste(as.character(x),collapse = ""), base = 2L)})
nums
grayCode<- function(n) {
library(gtools)
nums<- apply(permutations(n = 2, r = n, repeats.allowed = T), 1,
function(x) {c(0,1)[x]})
ans<- apply(nums, 2, function(x)
{strtoi(paste(as.character(x),collapse = ""), base = 2L)})
return(ans)
}
grayCode(3)
grayCode(2)
grayCode(5)
c(0,1)
cbind(0,c(0,1))
grayCode<- function(n) {
if(n==1) {return(c(0,1))}
else {
return(rbind(cbind(0,Recall(n-1)),
cbind(1, rev(Recall(n-1)))))
}
}
grayCode(5)
cbind(0,c(0,1))
rev(cbind(0,c(0,1)))
matrix(rev(cbind(0,c(0,1))), 2)
matrix(rev(cbind(0,c(0,1))), ncol=2)
matrix(rev(cbind(0,c(0,1))), nrow =2)
grayCode<- function(n) {
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(1,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
codes<- sub(n); l<- nrow(codes)
codes<- rbind(codes[1:l/2,], codes[l:(l/2+1),])
ans<- apply(codes, 1, function(x)
{strtoi(paste(as.character(x), collapse = ""), base = 2L)})
return(ans)
}
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(1,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
sub(2)
sub(3)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1))))}
}
sub(3)
2^2
2^5
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1)[2^(n-1):1,])))}
}
sub(3)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { return(rbind(cbind(0,Recall(n-1)),
cbind(1, Recall(n-1)[2^(n-2):1,])))}
}
sub(3)
m<- matrix(1:9,3)
m
apply(m, 2, rev)
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { mat<- apply(cbind(1, Recall(n-1)), 2, rev)
return(rbind(cbind(0,Recall(n-1)),mat)) }
}
sub(3)
grayCode<- function(n) {
sub<- function(n) {
if(n==1) {return(c(0,1))}
else { mat<- apply(cbind(1, Recall(n-1)), 2, rev)
return(rbind(cbind(0,Recall(n-1)),mat)) }
}
ans<- apply(sub(n), 1, function(x)
{strtoi(paste(as.character(x), collapse = ""), base = 2L)})
return(ans)
}
grayCode(3)
grayCode(2)
grayCode(4)
