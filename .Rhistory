space<- paste(rep(" ", space_num[i]+1), collapse = "")
display<- paste(display, space, keep_words[i+1], sep = "")
ans<- rbind(display, Recall(words[-(1:keep_index)], maxWidth))
}
return(unname(ans))
}
}
else { return(NULL) }
}
words<- c("This", "is", "an", "example", "of", "text", "justification.","alal")
fullJustify(words, 16)
ceiling(5/3)
fullJustify<- function(words, maxWidth) {
# do the function only when words exist
if(length(words)!=0) {
n<- sapply(words, nchar)
# the cumulative space of blanks in the words vector
blank<- c(0:(length(words)-1))
cumulative<- cumsum(n)+blank
keep_index<- max(which(cumulative<= maxWidth))
keep_words<- words[1: keep_index]
if(keep_index==1) {
space<- paste(rep(" ", maxWidth- nchar(keep_words)),
collapse = "")
display<- paste(keep_words, space, sep = "")
ans<- rbind(display, Recall(words[-(1:keep_index)], maxWidth))
return(unname(ans))
}
else {
space_num<- ceiling((maxWidth - cumulative[keep_index])/(keep_index-1))
space_num<- c(rep(space_num, keep_index-2),
(maxWidth - cumulative[keep_index])-
space_num*(keep_index-2))
display<- keep_words[1]
for(i in 1:(keep_index-1)) {
space<- paste(rep(" ", space_num[i]+1), collapse = "")
display<- paste(display, space, keep_words[i+1], sep = "")
ans<- rbind(display, Recall(words[-(1:keep_index)], maxWidth))
}
return(unname(ans))
}
}
else { return(NULL) }
}
words<- c("This", "is", "an", "example", "of", "text", "justification.","alal")
fullJustify(words, 16)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = mid * mid;
if (sq == x) {return(mid)}
else {
if(sq < x) {i<- mid + 1}
else {j<- mid - 1}
}
return(j)
}
}
mySqrt(9)
return(mid)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = mid * mid;
if (sq == x) {return(mid)}
else {
if(sq < x) {i<- mid + 1}
else {j<- mid - 1}
}
return(mid)
}
}
mySqrt(9)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = mid * mid;
if (sq == x) {return(mid)}
else {
if(sq < x) {i<- mid + 1}
else {j<- mid - 1}
}
return(i)
}
}
mySqrt(9)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = round(mid*mid, 4);
if (abs(sq-x)<0.0001) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = round(mid*mid);
if (abs(sq-x)<0.0001) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = round(mid*mid);
if (abs(sq-x)<0.0001) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
1e-4
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i<= j) {
mid = (i + j) / 2
sq = round(mid*mid);
if (abs(sq-x)< 1e-8) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
2.921875*2.921875
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i < j) {
mid = (i + j) / 2
sq = round(mid*mid);
if (abs(sq-x)< 1e-8) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i < j) {
mid = (i + j) / 2
sq = mid*mid;
if (abs(sq-x)< 1e-8) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(9)
mySqrt(9.1)
mySqrt(9.12)
mySqrt(10)
sqrt(10)
mySqrt(11)
sqrt(11)
mySqrt(100)
mySqrt(100000000000)
sqrt(100000000000)
mySqrt(10000)
mySqrt(10000000)
mySqrt(100000000)
mySqrt(100000000)
mySqrt(1000000000)
mySqrt<- function(x) {
i = 0; j = x/2 + 1;
while (i < j) {
mid = (i + j) / 2
sq = mid*mid;
if (abs(sq-x)< 1e-5) {return(mid)}
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
mySqrt(1000000000)
sqrt(100000000000)
mySqrt(1e10)
mySqrt(1e11)
sqrt(1e11)
mySqrt(1e9)
sqrt(1e9)
mySqrt<- function(x) {
if(x > 100) {
return(10*Recall(x/100))
}
else {
i = 0; j = x/2 + 1;
while (i < j) {
mid = (i + j) / 2
sq = mid*mid;
if (abs(sq-x)< 1e-5) { return(mid) }
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
}
mySqrt(1e11)
mySqrt<- function(x) {
if(x > 100) {
return(10*Recall(x/100))
}
else {
i = 0; j = x/2 + 1;
while (i < j) {
mid = (i + j) / 2
sq = mid*mid;
if (abs(sq-x)< 1e-10) { return(mid) }
else {
if(sq < x) {i<- mid}
else {j<- mid}
}
}
}
}
mySqrt(1e11)
sqrt(1e9)
sqrt(1e11)
sqrt(1e13)
mySqrt(1e13)
climbStairs<- function(n) {
#first way: all 1 step
ans<- 1
for(i in 1:n%/%2) {
ans<- ans+choose(n%%2,i)
}
return(ans)
}
climbStairs(9)
climbStairs<- function(n) {
#first way: all 1 step
ans<- 1
for(i in 1:(n%/%2)) {
ans<- ans+choose(n%%2,i)
}
return(ans)
}
climbStairs(9)
9%/%2
choose(4,1)
choose(4,2)
climbStairs<- function(n) {
#first way: all 1 step
ans<- 1
for(i in 1:(n%/%2)) {
ans<- ans+choose(n%/%2,i)
}
return(ans)
}
climbStairs(9)
"/" %in% "//"
"/" %in% "/2"
gregexpr("/", "//2")
gregexpr("/", "//2/")
gregexpr("/", "//2/")[[1]]
gregexpr("/", "//2/")[1]
gregexpr("/", "//2/")[[1]][1]
gregexpr("/", "//2/")[[1]][1,]
4 %in% gregexpr("/", "//2/")[[1]]
2 %in% gregexpr("/", "//2/")[[1]]
3 %in% gregexpr("/", "//2/")[[1]]
4 %in% gregexpr("/", "//2/")
word1<- "aa"; word2<- "abeaaaak"
gregexpr(pattern = w1, w2)
n1<- nchar(word1); n2<- nchar(word2);
if(n1<n2) {w1<- word1; w2<- word2; }
else { w1<- word2; w2<- word1; }
if(n1<n2) {w1<- word1; w2<- word2; }
else { w1<- word2; w2<- word1; }
gregexpr(pattern = w1, w2)
gregexpr(pattern = "afadf", w2)
gregexpr(pattern = "afadf", w2)==-1
matrix<- matrix(1:9,2)
matrix<- matrix(1:10,2)
matrix<- matrix(1:12,3)
matrix
matrix[2,3]<- 0
matrix==0
which(matrix==0)
8%/%3
ceiling(8/3)
ceiling(6/3)
matrix
m<- nrow(matrix); n<- ncol(matrix);
col_index<- ceiling(which(matrix==0)/m)
col_index
row_index<- which(matrix==0)- m*col_index
row_index
row_index<- which(matrix==0)- m*(col_index-1)
row_index
matrix[1,2]<- 0
matrix==0
which(matrix==0)
matrix<- [,2]<-0
matrix[,2]<-0
matrix
matrix(1:12,3)[1,2]<- 0
setZeroes<- function(matrix) {
m<- nrow(matrix); n<- ncol(matrix);
zeros<- which(matrix==0)
for(i in 1:length(zeros)) {
col_index<- ceiling(zeros[i]/m)
row_index<- zeros[i]- m*(col_index-1)
matrix[, col_index]<- 0
matrix[row_index, ]<- 0
}
return(matrix)
}
mat<- matrix(1:12,3)
mat[1,2]<- 0; mat[2,3]<- 0
mat
setZeroes(mat)
rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
matrix<- rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
nums<- unlist(t(matrix))
nums
nums<- c(t(matrix))
nums
searchMatrix<- function(matrix, target) {
nums<- c(t(matrix))
i<- 0; j<- length(nums);
while(i<j) {
mid<- (i+j) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]< target) { i<- mid }
else { j<- mid }
}
}
if(i==j) {return(FALSE)}
}
searchMatrix(matrix, 3)
matrix<- rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
searchMatrix(matrix, 3)
searchMatrix(matrix, 4)
searchMatrix<- function(matrix, target) {
nums<- c(t(matrix))
i<- 0; j<- length(nums);
while(i<=j) {
mid<- (i+j) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]< target) { i<- mid }
else { j<- mid }
}
}
if(i==j) {return(FALSE)}
}
matrix<- rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
searchMatrix(matrix, 4)
searchMatrix<- function(matrix, target) {
nums<- c(t(matrix))
i<- 0; j<- length(nums);
while(i<j) {
mid<- ceiling((i+j)/2)
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]< target) { i<- mid }
else { j<- mid }
}
}
if(i==j) {return(FALSE)}
}
matrix<- rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
searchMatrix(matrix, 4)
nums<- c(t(matrix))
i<- 0; j<- length(nums);
j
mid<- ceiling((i+j)/2)
mid
nums[mid]< target
target=3
nums[mid]< target
j<- mid
j
target=4
mid<- ceiling((i+j)/2)
mide
mid
nums[mid]< target
j<- mid
j
i
mid<- ceiling((i+j)/2)
mid
nums[mid]< target
i<- mid
i
j
mid<- ceiling((i+j)/2)
mid
nums[mid]< target
j<- mid
i
j
mid<- ceiling((i+j)/2)
mid
mid<- (i+j) %/% 2
i<- 0; j<- length(nums);
mid<- (i+j) %/% 2
nums[mid]< target
j<- mid
mid<- (i+j) %/% 2
mid
nums[mid]< target
j<- mid
i
j
mid<- (i+j) %/% 2
mid
nums[mid]< target
i<- mid
mid<- (i+j) %/% 2
mid
nums[mid]< target
i<- mi
i<- mid
mid<- (i+j) %/% 2
mid
nums[mid]< target
searchMatrix<- function(matrix, target) {
nums<- c(t(matrix))
i<- 0; j<- length(nums);
while(i<(j-1)) {
mid<- (i+j) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]< target) { i<- mid }
else { j<- mid }
}
}
return(FALSE)
}
matrix<- rbind(c(1,3,5,7),c(10,11,16,20),c(23,30,34,50))
searchMatrix(matrix, 4)
searchMatrix(matrix, 8)
searchMatrix(matrix, 7)
searchMatrix(matrix, 21)
searchMatrix<- function(matrix, target) {
nums<- c(t(matrix))
i<- 0; j<- length(nums);
while(i<(j-1)) {
mid<- (i+j) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]< target) { i<- mid }
else { j<- mid }
}
}
return(FALSE)
}
seq(1:10, by=3)
seq(from = 1, to=10, by=3)
?seq
seq(from = 1, by=3, length.out =2 )
seq(from = 1, by=3, length.out =0 )
nums
ans<- rep(NA, length(nums))
ans[1,2,3]
ans[c(1,2,3)]
amount<- sapply(c(0,1,2), function(x) {return(sum(nums==x))})
nums
nums<- c(0,0,0,0,1,1,1,1,1,1,2,2)
amount<- sapply(c(0,1,2), function(x) {return(sum(nums==x))})
amount<- sapply(c(0,1,2),
function(x) {return(sum(nums==x))})
ans<- rep(NA, length(nums))
ans
{seq(from=x, by=3, length.out = amount[x])}
index<- sapply(1:3, function(x)
{seq(from=x, by=3, length.out = amount[x])})
index
for(i in 1:3) { ans[index[[i]]]<- i-1 }
ans
x <- c(1, 2, 2, 3)
from <- c(1, 2)
to <- c(10, 20)
swap( x, from, to )
ans<- sapply(0:2, function(x)
{return(rep(x, amount[x+1]))})
ans
unlist(ans)
sortColors<- function(nums) {
amount<- sapply(c(0,1,2),
function(x) {return(sum(nums==x))})
ans<- sapply(0:2, function(x)
{return(rep(x, amount[x+1]))})
return(unlist(ans))
}
sortColors(c(0,1,2,2,2,2,2,1,1,1,0,0,0))
