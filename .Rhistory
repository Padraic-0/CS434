if(is.null(m)) {ans<- matrix}
else {
if(m==2) {ans<- c(matrix[1,], rev(matrix[2,]))}
else {
mat<- matrix[-c(1,m),-c(1,n)]
ans<- c(matrix[1, 1:n], matrix[2:m,n],
rev(matrix[m, 1:(n-1)]),
rev(matrix[2:(m-1),1]),
Recall(mat))
}
}
return(ans)
}
spiralOrder(matrix)
spiralOrder(matrix(1:8,4))
matrix(1:8,4)
canJump<- function(nums) {
n<- length(nums)
judge<- 0
for(i in 1:n) {
max_now<- i+nums[i]
if(max_now>=n) {judge<- 1}
if(max_now<=i) {break}
}
return(as.logical(judge))
}
canJump(c(2,3,1,1,4))
canJump(c(2,3,1,0,4))
canJump(c(3,2,1,0,4))
canJump(c(3,2,1,0,4,1))
canJump(c(2,3,1,1,4,4))
canJump(c(3,2,1,0))
canJump(c(3,2,1,0,1))
2%in%1:3
2%in%3:4
rbind(c(1,3), c(8,10), c(15,18), c(2,6))
intervals<- rbind(c(1,3), c(8,10), c(15,18), c(2,6))
rank(intervals)
rank(intervals[,1])
order(intervals[,1])
intervals[order(intervals[,1]),]
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
intervals[3,1]<- 5
View(intervals)
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
inter
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i < n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[(i+1):n,])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
mergeintervals<- function(intervals) {
n<- nrow(intervals)
inter<- intervals[order(intervals[,1]),]
ans<- NULL
i<- 2
while(i <= n) {
if(inter[i,1] %in% inter[i-1,1]:inter[i-1,2])
{
new<- c(inter[i-1,1], max(inter[i-1,2], inter[i,2]))
inter<- rbind(new, inter[-c(1,2),])
n<- n-1
}
else {i<- i+1}
}
return(inter)
}
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(8,10), c(15,18), c(2,6))
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
intervals<- rbind(c(1,9), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
intervals<- rbind(c(1,3), c(2,6), c(8,10), c(15,18))
mergeintervals(intervals)
rbind(c(1,1:n))
rbind(rep(1,n),1:n)
n=4
(rep(1,n),1:n)
cbind(rep(1,n),1:n)
cbind(1, 1:n, )
cbind(rep(1), 1:n, )
n=5
index<- matrix(NA, nrow=n^2, ncol=2)
index
i=1
c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i), n-i-1))
n=5
c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i), n-i-1))
c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev(rep(n-i, n-i-1)))
c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1)))
index[,1]<- c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1)))
n
for(i in 1:(n+1)/2) {
index<-c(index, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
index
index<- NULL
for(i in 1:(n+1)/2) {
index<-c(index, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
index
n
index<- NULL
for(i in 1:((n+1)/2)) {
index<-c(index, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
index
index<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(index, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
rowindex
index<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(index, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
rowindex
rowindex<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(rowindex, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), rev((n-i): (n-i-1))))
}
rowindex
length(rowindex)
(n-i):(n-i-1)
rowindex<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(rowindex, c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), (n-i):(n-i-1)))
}
rowindex
i=1
c(rep(i,(n-i+1)), (i+1):(n-i+1),
rep(n-i+1,n-i), (n-i):(n-i-1))
i=1
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1))
i=2
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1))
for(i in 1:((n-1)/2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
}
generateMatrix<- function(n) {
rowindex<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
}
}
rowindex
rowindex<- NULL
for(i in 1:((n-1)/2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
}
rowindex
length(rowindex)
rowindex<- NULL
colindex<- NULL
for(i in 1:(n %/% 2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
colindex<- c(colindex,
c(i:(n-i+1), rep(n-i+1, n-2*(i-1)),
(n-i):i, rep(i, n-2*i)))
}
colindex
length(colindex)
colindex<- NULL
for(i in 1:(n %/% 2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
colindex<- c(colindex,
c(i:(n-i+1), rep(n-i+1, n-2*i+1)),
(n-i):i, rep(i, n-2*i)))
}
rowindex<- NULL
colindex<- NULL
for(i in 1:(n %/% 2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
colindex<- c(colindex,
c(i:(n-i+1), rep(n-i+1, n-2*i+1),
(n-i):i, rep(i, n-2*i)))
}
length(colindex)
colindex
n=4
rowindex<- NULL
colindex<- NULL
for(i in 1:(n %/% 2)) {
rowindex<-c(rowindex,
c(rep(i,(n-2*(i-1))),(i+1):(n-2*(i-1)),
rep(n-i+1,n-2*(i-1)), (n-i):(i+1)))
colindex<- c(colindex,
c(i:(n-i+1), rep(n-i+1, n-2*i+1),
(n-i):i, rep(i, n-2*i)))
}
length(rowindex)
length(colindex)
rowindex
top<- 1
bottom<- 1
left<- 1
right<- 1
n
n=5
left:(n-right+1)
generateMatrix<- function(n) {
top<- 1
bottom<- 1
left<- 1
right<- 1
ans<- matrix(NA, nrow=n, ncol=n)
while(TRUE) {
for(i in left:(n-right+1)) {
ans[top, i]<- num
num<- num+1
}
top<- top+1
if(top+bottom==n) {break}
for(i in top:(n-bottom+1)) {
ans[i, n-right+1]<- num
num<- num+1
}
right<- right+1
if(left+right==n) {break}
for(i in (n-right+1):left) {
ans[n-bottom+1, i]<- num
num<- num+1
}
bottom<- bottom+1
if(top+bottom==n) {break}
for(i in (n-bottom+1):top) {
ans[i,left]<- num
num<- num+1
}
left<- left+1
if(left+right==n) {break}
}
return(ans)
}
generateMatrix(5)
generateMatrix<- function(n) {
num<- 1
top<- 1
bottom<- 1
left<- 1
right<- 1
ans<- matrix(NA, nrow=n, ncol=n)
while(TRUE) {
for(i in left:(n-right+1)) {
ans[top, i]<- num
num<- num+1
}
top<- top+1
if(top+bottom==n) {break}
for(i in top:(n-bottom+1)) {
ans[i, n-right+1]<- num
num<- num+1
}
right<- right+1
if(left+right==n) {break}
for(i in (n-right+1):left) {
ans[n-bottom+1, i]<- num
num<- num+1
}
bottom<- bottom+1
if(top+bottom==n) {break}
for(i in (n-bottom+1):top) {
ans[i,left]<- num
num<- num+1
}
left<- left+1
if(left+right==n) {break}
}
return(ans)
}
generateMatrix(5)
generateMatrix<- function(n) {
num<- 1
top<- 1
bottom<- 1
left<- 1
right<- 1
ans<- matrix(NA, nrow=n, ncol=n)
while(TRUE) {
for(i in left:(n-right+1)) {
ans[top, i]<- num
num<- num+1
}
top<- top+1
if(top+bottom-2==n) {break}
for(i in top:(n-bottom+1)) {
ans[i, n-right+1]<- num
num<- num+1
}
right<- right+1
if(left+right-2==n) {break}
for(i in (n-right+1):left) {
ans[n-bottom+1, i]<- num
num<- num+1
}
bottom<- bottom+1
if(top+bottom-2==n) {break}
for(i in (n-bottom+1):top) {
ans[i,left]<- num
num<- num+1
}
left<- left+1
if(left+right-2==n) {break}
}
return(ans)
}
generateMatrix(5)
generateMatrix(4)
generateMatrix(3)
generateMatrix(7)
?repeat
()
?repeat
generateMatrix<- function(n) {
num<- 1
top<- 1
bottom<- 1
left<- 1
right<- 1
ans<- matrix(NA, nrow=n, ncol=n)
repeat {
for(i in left:(n-right+1)) {
ans[top, i]<- num
num<- num+1
}
top<- top+1
if(top+bottom-2==n) {break}
for(i in top:(n-bottom+1)) {
ans[i, n-right+1]<- num
num<- num+1
}
right<- right+1
if(left+right-2==n) {break}
for(i in (n-right+1):left) {
ans[n-bottom+1, i]<- num
num<- num+1
}
bottom<- bottom+1
if(top+bottom-2==n) {break}
for(i in (n-bottom+1):top) {
ans[i,left]<- num
num<- num+1
}
left<- left+1
if(left+right-2==n) {break}
}
return(ans)
}
generateMatrix(4)
generateMatrix(5)
generateMatrix(7)
library(gtools)
n=9
all<- permutations(n=n, r=n)
n=4
all<- permutations(n=n, r=n)
getPermutation(4,20)
getPermutation<- function(n,k) {
library(gtools)
all<- permutations(n=n, r=n)
return(all[k,])
}
getPermutation(4,20)
View(getPermutation)
permutations(n=8, r=8, v=c(0,0,rep(1,6)))
choose(7,2)
ways[i, j] = 1;
i<-1;
i<-1;j<-1
generateMatrix<- function(n) {
num<- 1; top<- 1;  bottom<- 1; left<- 1;  right<- 1
ans<- matrix(NA, nrow=n, ncol=n)
repeat {
# generate the top element
for(i in left:(n-right+1)) {
ans[top, i]<- num
num<- num+1
}
top<- top+1
if(top+bottom-2==n) {break}
# generate the right element
for(i in top:(n-bottom+1)) {
ans[i, n-right+1]<- num
num<- num+1
}
right<- right+1
if(left+right-2==n) {break}
# generate the bottom element
for(i in (n-right+1):left) {
ans[n-bottom+1, i]<- num
num<- num+1
}
bottom<- bottom+1
if(top+bottom-2==n) {break}
# generate the left element
for(i in (n-bottom+1):top) {
ans[i,left]<- num
num<- num+1
}
left<- left+1
if(left+right-2==n) {break}
}
return(ans)
}
generateMatrix(4)
generateMatrix(5)
generateMatrix(7)
getPermutation<- function(n,k) {
library(gtools)
all<- permutations(n=n, r=n)
return(all[k,])
}
uniquePaths<- function(m, n) {
ways<- matrix(NA, nrow=m, ncol=n)
for (i in 1:m) {
for (j in 1:n) {
if (i == 1 || j == 1) {ways[i, j] <- 1}
else {ways[i,j] <-  ways[i-1, j] + ways[i, j-1]}
}
}
return (ways[m,n])
}
uniquePaths(3,7)
uniquePaths<- function(m, n) {
ways<- matrix(NA, nrow=m, ncol=n)
for (i in 1:m) {
for (j in 1:n) {
if (i == 1 || j == 1) {ways[i, j] <- 1}
else {ways[i,j] <-  ways[i-1, j] + ways[i, j-1]}
}
}
return (ways)
}
uniquePaths(3,7)
choose(7,3)
choose(2,1)
choose(7,2)
choose(8,2)
