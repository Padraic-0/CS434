index<- combine(1:3, 3)
index<- combine(1:6, 6)
index<- combine(6, 6)
index<- combine(n, i)
ans[[i]]<- apply(index, 1, function(x){nums[x]})
for(i in 1:n) {
index<- combine(n, i)
ans[[i]]<- apply(index, 1, function(x){nums[x]})
}
ans
ans<- vector("list")
for(i in 1:n) {
index<- combine(n, i)
ans[[i]]<-t(apply(index, 1, function(x){nums[x]}))
}
ans
subsets<- function(nums) {
n<- length(nums)
ans<- vector("list")
for(i in 2:(n-1)) {
index<- combine(n, i)
ans[[i]]<-t(apply(index, 1, function(x){nums[x]}))
}
ans[[i+1]]<- nums
ans[[i+2]]<- matrix(nums, ncol = 1)
ans[[i+3]]<- ""
return(ans)
}
subset(c(1,2,3,4))
subsets(c(1,2,3,4))
subsets<- function(nums) {
n<- length(nums)
ans<- vector("list")
for(i in 2:(n-1)) {
index<- combine(n, i)
ans[[i-1]]<-t(apply(index, 1, function(x){nums[x]}))
}
ans[[i]]<- nums
ans[[i+1]]<- matrix(nums, ncol = 1)
ans[[i+2]]<- ""
return(ans)
}
subsets(c(1,2,3,4))
subsets<- function(nums) {
n<- length(nums)
ans<- vector("list")
for(i in 2:(n-1)) {
index<- combine(n, i)
ans[[i]]<-t(apply(index, 1, function(x){nums[x]}))
}
ans[[1]]<- matrix(nums, ncol = 1)
ans[[i+1]]<- nums
ans[[i+2]]<- ""
return(ans)
}
subsets(c(1,2,3,4))
board<- matrix(c('A','B','C','E'),c('S','F','C','S'),
c('A','D','E','E'))
board<- rbind(c('A','B','C','E'),c('S','F','C','S'),
c('A','D','E','E'))
board
which(board=="D")
word<- "ABCCED"
word_vec<- unlist(strsplit(word, ""))
word_vec
which(board=="c")
which(board=="C")
7%/%3
7/3
round(7/3)
round(8/3)
index<- which(board==word_vec)
index
index<- which(board==word_vec[1])
for(i in index) {
colnum<- ceiling(i/m)
rownum<- i- (colnum-1)*m
}
m<- nrow(board); n<- ncol(board)
len<- nchar(word)
word_vec<- unlist(strsplit(word, ""))
index<- which(board==word_vec[1])
for(i in index) {
colnum<- ceiling(i/m)
rownum<- i- (colnum-1)*m
}
k=2
head<- c(1,2,3,4,5)
n<- length(head)
r<- k %% n
r
c(1,2,3,4,5,NULL)
rotateRight<- function(head, k) {
n<- length(head)
r<- k %% n
return(c(head[(n-r+1):n], head[1:(n-r+1)]))
}
rotateRight(c(1,2,3,4,5), 2)
rotateRight<- function(head, k) {
n<- length(head)
r<- k %% n
return(c(head[(n-r+1):n], head[1:(n-r)]))
}
rotateRight(c(1,2,3,4,5), 2)
rotateRight(c(1,2,3,4,5), 8)
rotateRight(c(1,2,3,4,5), 7)
nums<- c(1,1,1,2,2,3)
amount<- table(nums)
amount
amount<- unlist(table(nums))
amount
amount[1]
amount<- table(nums)
dup<- ifelse(amount>=2, 2, amount)
dup
names(amount)
unique(nums)
removeDuplicates<- function(nums) {
amount<- table(nums)
dup<- ifelse(amount>=2, 2, amount)
ans<- NULL
for(i in 1:length(dup)) {
ans<- c(ans, rep(unique(nums)[i], dup[i]))
}
return(ans)
}
removeDuplicates(c(1,1,1,2,2,3))
removeDuplicates(c(1,1,1,2,2,3,4,4,4,4,4))
removeDuplicates(c(1,7,1,2,2,3,4,4,4,4,4))
table(amount)
amount=c(1,7,1,2,2,3,4,4,4,4,4)
table(amount)
unique(amount)
names(amount
)
names(dup)
amount<- table(nums)
names(amount)
nums
nums=c(1,7,1,2,2,3,4,4,4,4,4)
amount<- table(nums)
dup<- ifelse(amount>=2, 2, amount)
names(amount)
amount
removeDuplicates<- function(nums) {
amount<- table(nums)
dup<- ifelse(amount>=2, 2, amount)
ans<- NULL
for(i in 1:length(dup)) {
ans<- c(ans, rep(as.numeric(names(amount))[i], dup[i]))
}
return(ans)
}
removeDuplicates(c(1,7,1,2,2,3,4,4,4,4,4))
search<- function(nums, target) {
left<- 1; right<-  length(nums)
while(left<= right) {
mid<- (left+right) %/% 2
if(nums[mid]==target) {return(TRUE)}
else {
if(nums[mid]==mid[left]) {left<- left+1}
else {
if(nums[mid]> nums[left]) { right<- mid }
else {left<- mid }
}
}
}
return(FALSE)
}
search(c(1,2,3,5,5,5), 2)
search<- function(nums, target) {
left<- 1; right<-  length(nums)
while(left<= right) {
mid<- (left+right) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]==nums[left]) {left<- left+1}
else {
if(nums[mid]> nums[left]) { right<- mid }
else {left<- mid }
}
}
}
return(FALSE)
}
search(c(1,2,3,5,5,5), 2)
search(c(1,2,3,5,5,5), 4)
search(c(1,2,3,5,5,5), 5)
search<- function(nums, target) {
left<- 1; right<-  length(nums)
while(left<= right) {
mid<- (left+right) %/% 2
if(nums[mid]==target) { return(TRUE) }
else {
if(nums[mid]==nums[left]) {left<- left+1}
else {
if(nums[mid]> nums[left]) {
if(target>= nums[left] & target< nums[mid]) {right<- mid}
else {left<- mid}
}
else {
if(target> nums[mid] & target<= nums[right]) {left<- mid}
else {right<- mid}
}
}
}
}
return(FALSE)
}
search(c(1,2,3,5,5,5), 5)
search(c(1,2,3,5,5,5), 4)
search(c(1,2,3,5,5,5), 1)
search(c(1,2,3,5,5,5), 2)
search(c(6,7,9,10,1,2,3,5),4)
search(c(6,7,9,10,1,2,3,5),1)
search(c(6,7,9,10,1,2,3,5),8)
deleteDuplicates<- function(head) {
ans<- NULL
for(i in 1:length(head)) {
if(i==1) {
if(head[i+1]!=head[i+1]) {ans<- c(ans, head[i])}
}
if(i==length(head)) {
if(head[i]!=head[i-1]) {ans<- c(ans, head[i])}
}
else {
if(head[i]!=head[i-1] & head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
}
return(ans)
}
deleteDuplicates(c(1,2,3,3,4,5))
deleteDuplicates<- function(head) {
ans<- NULL
for(i in 1:length(head)) {
if(i==1) {
if(head[i+1]!=head[i+1]) {ans<- c(ans, head[i])}
}
else {
if(i==length(head)) {
if(head[i]!=head[i-1]) {ans<- c(ans, head[i])}
}
else {
if(head[i]!=head[i-1] & head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
}
}
return(ans)
}
deleteDuplicates(c(1,2,3,3,4,5))
deleteDuplicates<- function(head) {
ans<- NULL
for(i in 1:length(head)) {
if(i==1) {
if(head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
else {
if(i==length(head)) {
if(head[i]!=head[i-1]) {ans<- c(ans, head[i])}
}
else {
if(head[i]!=head[i-1] & head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
}
}
return(ans)
}
deleteDuplicates(c(1,2,3,3,4,5))
deleteDuplicates(c(1,2,3,3,4,4,5))
deleteDuplicates<- function(head) {
ans<- NULL
for(i in 1:length(head)) {
if(i==1) {
if(head[i+1]!=head[i]) {ans<- c(ans,head[i])}
}
else {
if(head[i]!= head[i-1]) {ans<- c(ans, head[i])}
}
}
return(ans)
}
deleteDuplicates(c(1,2,3,3,4,4,5))
deleteDuplicatesII<- function(head) {
ans<- NULL
for(i in 1:length(head)) {
if(i==1) {
if(head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
else {
if(i==length(head)) {
if(head[i]!=head[i-1]) {ans<- c(ans, head[i])}
}
else {
if(head[i]!=head[i-1] & head[i]!=head[i+1]) {ans<- c(ans, head[i])}
}
}
}
return(ans)
}
deleteDuplicatesII(c(1,2,3,3,4,4,5))
heights<- c(2,1,5,6,2,3)
sort(heights)
unique(heights)
largestRectangleArea<- function(heights) {
h<- unique(heights)
ans<- NULL
for(i in 1:h) {
area<- 0
for(j in 1:length(heights)) {
if(heights[j]>=i) {area<- area+i}
else {break}
}
ans<- c(ans, area)
}
return(ans)
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
h<- unique(heights)
ans<- NULL
for(i in h) {
area<- 0
for(j in 1:length(heights)) {
if(heights[j]>=i) {area<- area+i}
else {break}
}
ans<- c(ans, area)
}
return(ans)
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- heights[i]
if(i==1) { for(j in 2:n) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
}}
else {if(i==n) {for(j in (n-1):1) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
}}
else {
for(j in (i+1):length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in (i-1):1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
}}}
ans<- c(ans, area)
}
return(ans)
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- heights[i]
if(i==1) { for(j in 2:n) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}}
else {if(i==n) {for(j in (n-1):1) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}}
else {
for(j in (i+1):length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in (i-1):1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}}}
ans<- c(ans, area)
}
return(ans)
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- heights[i]
if(i==1) { for(j in 2:n) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}}
else {if(i==n) {for(j in (n-1):1) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}}
else {
for(j in (i+1):length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in (i-1):1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}}}
ans<- c(ans, area)
}
return(max(ans))
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- -heights[i]
for(j in (i+1):length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in (i-1):1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}
ans<- c(ans, area)
}
return(max(ans))
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- -heights[i]
for(j in i:length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in i:1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}
ans<- c(ans, area)
}
return(max(ans))
}
largestRectangleArea(c(2,1,5,6,2,3))
largestRectangleArea<- function(heights) {
n<- length(heights)
ans<- NULL
for(i in 1:n) {
area<- -heights[i]
for(j in i:length(heights)) {
if(heights[j]>=heights[i]) {area<- area+heights[i]}
else {break}
}
for(j in i:1) {
if(heights[j]>= heights[i]) {area<- area+heights[i]}
else {break}
}
ans<- c(ans, area)
}
return(ans)
}
largestRectangleArea(c(2,1,5,6,2,3))
matrix(c(1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0),4)
matrix<- matrix(c(1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0),4)
matrix[1:1, 1:2]
matrix[1:2, 1:2]
maximalRectangle<- function(matrix) {
m<- nrow(matrix); n<- ncol(matrix)
ans<- 0
for(i in 1:m) { for(j in 1:n) {
if(matrix[i,j]!=0) {
for(l in i:m) { for(k in j:n) {
area<- (l-i+1)*(k-j+1)
if(sum(matrix[i:l, j:k])==area) {ans<- max(ans,area)}
else {break}
}}
for(k in j:n) { for(l in i:m) {
area<- (l-i+1)*(k-j+1)
if(sum(matrix[i:l, j:k])==area) {ans<- max(ans,area)}
else {break}
}}
}
}}
return(ans)
}
matrix<- matrix(c(1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0),4)
maximalRectangle(matrix)
matrix<- matrix(c(1,0,1,0,0,
1,0,1,1,1,
1,1,1,1,1,
1,0,0,1,0),4)
matrix
matrix<- t(matrix(c(1,0,1,0,0,
1,0,1,1,1,
1,1,1,1,1,
1,0,0,1,0),5))
matrix
matrix<- t(matrix(c(1,0,1,0,0,
1,0,1,0,1,
1,1,1,1,1,
1,0,0,1,0), 5))
maximalRectangle(matrix)
matrix<- t(matrix(c(1,0,1,0,0,
1,0,1,0,1,
1,1,1,0,1,
1,0,0,1,0), 5))
maximalRectangle(matrix)
matrix<- t(matrix(c(1,0,1,0,0,
1,0,1,1,1,
1,1,1,1,1,
1,0,0,1,0), 5))
